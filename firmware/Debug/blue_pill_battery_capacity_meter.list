
blue_pill_battery_capacity_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080038f8  080038f8  000138f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  0800397c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  20000078  080039f0  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200001c8  080039f0  000201c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018529  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034a9  00000000  00000000  000385c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000725a  00000000  00000000  0003ba6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae8  00000000  00000000  00042cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e20  00000000  00000000  000437b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000067f6  00000000  00000000  000445d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e9e  00000000  00000000  0004adce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ec6c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000234c  00000000  00000000  0004ece8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080038e0 	.word	0x080038e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080038e0 	.word	0x080038e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_InitTick+0x3c>)
{
 8000928:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092a:	7818      	ldrb	r0, [r3, #0]
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	fbb3 f3f0 	udiv	r3, r3, r0
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_InitTick+0x40>)
 8000936:	6810      	ldr	r0, [r2, #0]
 8000938:	fbb0 f0f3 	udiv	r0, r0, r3
 800093c:	f000 fb46 	bl	8000fcc <HAL_SYSTICK_Config>
 8000940:	4604      	mov	r4, r0
 8000942:	b958      	cbnz	r0, 800095c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	2d0f      	cmp	r5, #15
 8000946:	d809      	bhi.n	800095c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	4602      	mov	r2, r0
 800094a:	4629      	mov	r1, r5
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 fafc 	bl	8000f4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_InitTick+0x44>)
 8000956:	4620      	mov	r0, r4
 8000958:	601d      	str	r5, [r3, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	2000000c 	.word	0x2000000c
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x20>)
{
 800096e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000972:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097a:	f000 fad5 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffd0 	bl	8000924 <HAL_InitTick>
  HAL_MspInit();
 8000984:	f002 f9b8 	bl	8002cf8 <HAL_MspInit>
}
 8000988:	2000      	movs	r0, #0
 800098a:	bd08      	pop	{r3, pc}
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x10>)
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_IncTick+0x14>)
 8000994:	6811      	ldr	r1, [r2, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	440b      	add	r3, r1
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200000c4 	.word	0x200000c4
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <HAL_GetTick+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000c4 	.word	0x200000c4

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff6 	bl	80009a8 <HAL_GetTick>
 80009bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80009c0:	bf1e      	ittt	ne
 80009c2:	4b04      	ldrne	r3, [pc, #16]	; (80009d4 <HAL_Delay+0x20>)
 80009c4:	781b      	ldrbne	r3, [r3, #0]
 80009c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	1b40      	subs	r0, r0, r5
 80009ce:	4284      	cmp	r4, r0
 80009d0:	d8fa      	bhi.n	80009c8 <HAL_Delay+0x14>
  {
  }
}
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	20000000 	.word	0x20000000

080009d8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80009dc:	4770      	bx	lr

080009de <HAL_ADC_LevelOutOfWindowCallback>:
 80009de:	4770      	bx	lr

080009e0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80009e0:	6803      	ldr	r3, [r0, #0]
{
 80009e2:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80009e4:	685a      	ldr	r2, [r3, #4]
{
 80009e6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80009e8:	0690      	lsls	r0, r2, #26
 80009ea:	d527      	bpl.n	8000a3c <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	0791      	lsls	r1, r2, #30
 80009f0:	d524      	bpl.n	8000a3c <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009f4:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80009f6:	bf5e      	ittt	pl
 80009f8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80009fa:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80009fe:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000a06:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000a0a:	d110      	bne.n	8000a2e <HAL_ADC_IRQHandler+0x4e>
 8000a0c:	68e2      	ldr	r2, [r4, #12]
 8000a0e:	b972      	cbnz	r2, 8000a2e <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	f022 0220 	bic.w	r2, r2, #32
 8000a16:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a1e:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a22:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a24:	bf5e      	ittt	pl
 8000a26:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000a28:	f043 0301 	orrpl.w	r3, r3, #1
 8000a2c:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f001 fe38 	bl	80026a4 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a34:	f06f 0212 	mvn.w	r2, #18
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	0610      	lsls	r0, r2, #24
 8000a42:	d530      	bpl.n	8000aa6 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	0751      	lsls	r1, r2, #29
 8000a48:	d52d      	bpl.n	8000aa6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a4c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a4e:	bf5e      	ittt	pl
 8000a50:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000a52:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000a56:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000a5e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000a62:	d00a      	beq.n	8000a7a <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000a64:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a66:	0550      	lsls	r0, r2, #21
 8000a68:	d416      	bmi.n	8000a98 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000a70:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000a74:	d110      	bne.n	8000a98 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a76:	68e2      	ldr	r2, [r4, #12]
 8000a78:	b972      	cbnz	r2, 8000a98 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a80:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a88:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a8c:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a8e:	bf5e      	ittt	pl
 8000a90:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000a92:	f043 0301 	orrpl.w	r3, r3, #1
 8000a96:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f000 fa43 	bl	8000f24 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000a9e:	f06f 020c 	mvn.w	r2, #12
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	0652      	lsls	r2, r2, #25
 8000aac:	d50d      	bpl.n	8000aca <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	07db      	lsls	r3, r3, #31
 8000ab2:	d50a      	bpl.n	8000aca <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ab6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000abc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000abe:	f7ff ff8e 	bl	80009de <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ac2:	f06f 0201 	mvn.w	r2, #1
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	bd10      	pop	{r4, pc}

08000acc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000acc:	2300      	movs	r3, #0
{ 
 8000ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000ad0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ad2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d074      	beq.n	8000bc4 <HAL_ADC_ConfigChannel+0xf8>
 8000ada:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000adc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000ade:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000ae2:	2d06      	cmp	r5, #6
 8000ae4:	6802      	ldr	r2, [r0, #0]
 8000ae6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000aea:	680c      	ldr	r4, [r1, #0]
 8000aec:	d825      	bhi.n	8000b3a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000aee:	442b      	add	r3, r5
 8000af0:	251f      	movs	r5, #31
 8000af2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000af4:	3b05      	subs	r3, #5
 8000af6:	409d      	lsls	r5, r3
 8000af8:	ea26 0505 	bic.w	r5, r6, r5
 8000afc:	fa04 f303 	lsl.w	r3, r4, r3
 8000b00:	432b      	orrs	r3, r5
 8000b02:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b04:	2c09      	cmp	r4, #9
 8000b06:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000b0a:	688d      	ldr	r5, [r1, #8]
 8000b0c:	d92f      	bls.n	8000b6e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b0e:	2607      	movs	r6, #7
 8000b10:	4423      	add	r3, r4
 8000b12:	68d1      	ldr	r1, [r2, #12]
 8000b14:	3b1e      	subs	r3, #30
 8000b16:	409e      	lsls	r6, r3
 8000b18:	ea21 0106 	bic.w	r1, r1, r6
 8000b1c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b24:	f1a4 0310 	sub.w	r3, r4, #16
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d92b      	bls.n	8000b84 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	b002      	add	sp, #8
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b3a:	2d0c      	cmp	r5, #12
 8000b3c:	d80b      	bhi.n	8000b56 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b3e:	442b      	add	r3, r5
 8000b40:	251f      	movs	r5, #31
 8000b42:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b44:	3b23      	subs	r3, #35	; 0x23
 8000b46:	409d      	lsls	r5, r3
 8000b48:	ea26 0505 	bic.w	r5, r6, r5
 8000b4c:	fa04 f303 	lsl.w	r3, r4, r3
 8000b50:	432b      	orrs	r3, r5
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	e7d6      	b.n	8000b04 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b56:	442b      	add	r3, r5
 8000b58:	251f      	movs	r5, #31
 8000b5a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000b5c:	3b41      	subs	r3, #65	; 0x41
 8000b5e:	409d      	lsls	r5, r3
 8000b60:	ea26 0505 	bic.w	r5, r6, r5
 8000b64:	fa04 f303 	lsl.w	r3, r4, r3
 8000b68:	432b      	orrs	r3, r5
 8000b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b6c:	e7ca      	b.n	8000b04 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b6e:	2607      	movs	r6, #7
 8000b70:	6911      	ldr	r1, [r2, #16]
 8000b72:	4423      	add	r3, r4
 8000b74:	409e      	lsls	r6, r3
 8000b76:	ea21 0106 	bic.w	r1, r1, r6
 8000b7a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b7e:	430b      	orrs	r3, r1
 8000b80:	6113      	str	r3, [r2, #16]
 8000b82:	e7cf      	b.n	8000b24 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_ADC_ConfigChannel+0xfc>)
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d116      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b8a:	6893      	ldr	r3, [r2, #8]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	d4cd      	bmi.n	8000b2c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b90:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b92:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b98:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b9a:	d1c7      	bne.n	8000b2c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_ADC_ConfigChannel+0x100>)
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <HAL_ADC_ConfigChannel+0x104>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	4353      	muls	r3, r2
            wait_loop_index--;
 8000baa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bac:	9b01      	ldr	r3, [sp, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0bc      	beq.n	8000b2c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000bb2:	9b01      	ldr	r3, [sp, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	e7f8      	b.n	8000baa <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e7b4      	b.n	8000b2e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e7b5      	b.n	8000b34 <HAL_ADC_ConfigChannel+0x68>
 8000bc8:	40012400 	.word	0x40012400
 8000bcc:	2000000c 	.word	0x2000000c
 8000bd0:	000f4240 	.word	0x000f4240

08000bd4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000bd4:	2300      	movs	r3, #0
{
 8000bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000bd8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bda:	6803      	ldr	r3, [r0, #0]
{
 8000bdc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	07d2      	lsls	r2, r2, #31
 8000be2:	d502      	bpl.n	8000bea <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000be4:	2000      	movs	r0, #0
}
 8000be6:	b002      	add	sp, #8
 8000be8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	f042 0201 	orr.w	r2, r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <ADC_Enable+0x68>)
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <ADC_Enable+0x6c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000bfc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	b9c3      	cbnz	r3, 8000c34 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000c02:	f7ff fed1 	bl	80009a8 <HAL_GetTick>
 8000c06:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	689d      	ldr	r5, [r3, #8]
 8000c0c:	f015 0501 	ands.w	r5, r5, #1
 8000c10:	d1e8      	bne.n	8000be4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c12:	f7ff fec9 	bl	80009a8 <HAL_GetTick>
 8000c16:	1b80      	subs	r0, r0, r6
 8000c18:	2802      	cmp	r0, #2
 8000c1a:	d9f5      	bls.n	8000c08 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000c1e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c2a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c32:	e7d8      	b.n	8000be6 <ADC_Enable+0x12>
      wait_loop_index--;
 8000c34:	9b01      	ldr	r3, [sp, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	e7e0      	b.n	8000bfc <ADC_Enable+0x28>
 8000c3a:	bf00      	nop
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	000f4240 	.word	0x000f4240

08000c44 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000c44:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000c48:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000c4a:	2b01      	cmp	r3, #1
{
 8000c4c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000c4e:	d058      	beq.n	8000d02 <HAL_ADC_Start_IT+0xbe>
 8000c50:	2301      	movs	r3, #1
 8000c52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000c56:	f7ff ffbd 	bl	8000bd4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d14d      	bne.n	8000cfa <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c60:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8000c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d104      	bne.n	8000c80 <HAL_ADC_Start_IT+0x3c>
 8000c76:	4925      	ldr	r1, [pc, #148]	; (8000d0c <HAL_ADC_Start_IT+0xc8>)
 8000c78:	684a      	ldr	r2, [r1, #4]
 8000c7a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000c7e:	d132      	bne.n	8000ce6 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000c86:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c88:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c8a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c8c:	bf41      	itttt	mi
 8000c8e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000c90:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000c94:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000c98:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ca0:	bf1c      	itt	ne
 8000ca2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000ca4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000ca8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cb0:	f06f 0202 	mvn.w	r2, #2
 8000cb4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	f042 0220 	orr.w	r2, r2, #32
 8000cbc:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000cc4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cc8:	d113      	bne.n	8000cf2 <HAL_ADC_Start_IT+0xae>
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_ADC_Start_IT+0xc4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d105      	bne.n	8000cdc <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cd0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000cd4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cd6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000cda:	d10a      	bne.n	8000cf2 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ce8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cec:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cee:	684a      	ldr	r2, [r1, #4]
 8000cf0:	e7cb      	b.n	8000c8a <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cf8:	e7f3      	b.n	8000ce2 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000d00:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000d02:	2002      	movs	r0, #2
}
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	40012800 	.word	0x40012800
 8000d0c:	40012400 	.word	0x40012400

08000d10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d10:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d12:	6803      	ldr	r3, [r0, #0]
{
 8000d14:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	07d2      	lsls	r2, r2, #31
 8000d1a:	d401      	bmi.n	8000d20 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d28:	f7ff fe3e 	bl	80009a8 <HAL_GetTick>
 8000d2c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	07db      	lsls	r3, r3, #31
 8000d34:	d5f2      	bpl.n	8000d1c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d36:	f7ff fe37 	bl	80009a8 <HAL_GetTick>
 8000d3a:	1b40      	subs	r0, r0, r5
 8000d3c:	2802      	cmp	r0, #2
 8000d3e:	d9f6      	bls.n	8000d2e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d42:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d52:	bd38      	pop	{r3, r4, r5, pc}

08000d54 <HAL_ADC_Init>:
{
 8000d54:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000d56:	4604      	mov	r4, r0
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d071      	beq.n	8000e40 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d5e:	b923      	cbnz	r3, 8000d6a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000d62:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000d66:	f001 ffe9 	bl	8002d3c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff ffd0 	bl	8000d10 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d72:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d78:	d164      	bne.n	8000e44 <HAL_ADC_Init+0xf0>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d162      	bne.n	8000e44 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d7e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000d80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d84:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000d86:	f023 0302 	bic.w	r3, r3, #2
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000d8e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d90:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000d92:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000d94:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000d9a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d9e:	d038      	beq.n	8000e12 <HAL_ADC_Init+0xbe>
 8000da0:	2901      	cmp	r1, #1
 8000da2:	bf14      	ite	ne
 8000da4:	4606      	movne	r6, r0
 8000da6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000daa:	6965      	ldr	r5, [r4, #20]
 8000dac:	2d01      	cmp	r5, #1
 8000dae:	d107      	bne.n	8000dc0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d130      	bne.n	8000e16 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000db4:	69a3      	ldr	r3, [r4, #24]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000dbc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000dc0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000dc6:	685d      	ldr	r5, [r3, #4]
 8000dc8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000dcc:	ea45 0506 	orr.w	r5, r5, r6
 8000dd0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000dd2:	689e      	ldr	r6, [r3, #8]
 8000dd4:	4d1d      	ldr	r5, [pc, #116]	; (8000e4c <HAL_ADC_Init+0xf8>)
 8000dd6:	ea05 0506 	and.w	r5, r5, r6
 8000dda:	ea45 0502 	orr.w	r5, r5, r2
 8000dde:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_Init+0x92>
 8000de2:	2901      	cmp	r1, #1
 8000de4:	d120      	bne.n	8000e28 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000de6:	6921      	ldr	r1, [r4, #16]
 8000de8:	3901      	subs	r1, #1
 8000dea:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000dec:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000dee:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000df2:	4329      	orrs	r1, r5
 8000df4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df6:	6899      	ldr	r1, [r3, #8]
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_ADC_Init+0xfc>)
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d115      	bne.n	8000e2c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	2300      	movs	r3, #0
 8000e02:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000e04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e06:	f023 0303 	bic.w	r3, r3, #3
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e12:	460e      	mov	r6, r1
 8000e14:	e7c9      	b.n	8000daa <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e26:	e7cb      	b.n	8000dc0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e7df      	b.n	8000dec <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e2e:	f023 0312 	bic.w	r3, r3, #18
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000e40:	2001      	movs	r0, #1
}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e4a:	e7f9      	b.n	8000e40 <HAL_ADC_Init+0xec>
 8000e4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e50:	ff1f0efe 	.word	0xff1f0efe

08000e54 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000e54:	2300      	movs	r3, #0
{
 8000e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e58:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000e5e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d05a      	beq.n	8000f1a <HAL_ADCEx_Calibration_Start+0xc6>
 8000e64:	2301      	movs	r3, #1
 8000e66:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e6a:	f7ff ff51 	bl	8000d10 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e6e:	4605      	mov	r5, r0
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d132      	bne.n	8000eda <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e76:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e7c:	f023 0302 	bic.w	r3, r3, #2
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000e88:	681e      	ldr	r6, [r3, #0]
 8000e8a:	f000 fcb5 	bl	80017f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e8e:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000e92:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000e94:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000e96:	9b01      	ldr	r3, [sp, #4]
 8000e98:	bb1b      	cbnz	r3, 8000ee2 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fe9a 	bl	8000bd4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	6893      	ldr	r3, [r2, #8]
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000eaa:	f7ff fd7d 	bl	80009a8 <HAL_GetTick>
 8000eae:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	0712      	lsls	r2, r2, #28
 8000eb6:	d418      	bmi.n	8000eea <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	f042 0204 	orr.w	r2, r2, #4
 8000ebe:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000ec0:	f7ff fd72 	bl	80009a8 <HAL_GetTick>
 8000ec4:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	075b      	lsls	r3, r3, #29
 8000ecc:	d41f      	bmi.n	8000f0e <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ed0:	f023 0303 	bic.w	r3, r3, #3
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eda:	2300      	movs	r3, #0
 8000edc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ee0:	e012      	b.n	8000f08 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000ee2:	9b01      	ldr	r3, [sp, #4]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	e7d5      	b.n	8000e96 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000eea:	f7ff fd5d 	bl	80009a8 <HAL_GetTick>
 8000eee:	1b80      	subs	r0, r0, r6
 8000ef0:	280a      	cmp	r0, #10
 8000ef2:	d9dd      	bls.n	8000eb0 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000ef6:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	f023 0312 	bic.w	r3, r3, #18
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000f08:	4628      	mov	r0, r5
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f0e:	f7ff fd4b 	bl	80009a8 <HAL_GetTick>
 8000f12:	1b80      	subs	r0, r0, r6
 8000f14:	280a      	cmp	r0, #10
 8000f16:	d9d6      	bls.n	8000ec6 <HAL_ADCEx_Calibration_Start+0x72>
 8000f18:	e7ec      	b.n	8000ef4 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000f1a:	2502      	movs	r5, #2
 8000f1c:	e7f4      	b.n	8000f08 <HAL_ADCEx_Calibration_Start+0xb4>
 8000f1e:	bf00      	nop
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f2a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f42:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f44:	60d3      	str	r3, [r2, #12]
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b530      	push	{r4, r5, lr}
 8000f50:	68dc      	ldr	r4, [r3, #12]
 8000f52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f56:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	bf28      	it	cs
 8000f60:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f68:	bf98      	it	ls
 8000f6a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f70:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f74:	bf88      	it	hi
 8000f76:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4019      	ands	r1, r3
 8000f7a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f80:	3c01      	subs	r4, #1
 8000f82:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f84:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f86:	ea42 0201 	orr.w	r2, r2, r1
 8000f8a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	bfaf      	iteee	ge
 8000f90:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	4b06      	ldrlt	r3, [pc, #24]	; (8000fb0 <HAL_NVIC_SetPriority+0x64>)
 8000f96:	f000 000f 	andlt.w	r0, r0, #15
 8000f9a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	bfa5      	ittet	ge
 8000f9e:	b2d2      	uxtbge	r2, r2
 8000fa0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000faa:	bd30      	pop	{r4, r5, pc}
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	e000ed14 	.word	0xe000ed14

08000fb4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	0942      	lsrs	r2, r0, #5
 8000fb8:	f000 001f 	and.w	r0, r0, #31
 8000fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8000fc0:	4b01      	ldr	r3, [pc, #4]	; (8000fc8 <HAL_NVIC_EnableIRQ+0x14>)
 8000fc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	3801      	subs	r0, #1
 8000fce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fd2:	d20a      	bcs.n	8000fea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ffc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	4616      	mov	r6, r2
 8001000:	4b65      	ldr	r3, [pc, #404]	; (8001198 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001002:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80011a8 <HAL_GPIO_Init+0x1b0>
 8001006:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80011ac <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800100a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001010:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001014:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001018:	45a0      	cmp	r8, r4
 800101a:	d17f      	bne.n	800111c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800101c:	684d      	ldr	r5, [r1, #4]
 800101e:	2d12      	cmp	r5, #18
 8001020:	f000 80af 	beq.w	8001182 <HAL_GPIO_Init+0x18a>
 8001024:	f200 8088 	bhi.w	8001138 <HAL_GPIO_Init+0x140>
 8001028:	2d02      	cmp	r5, #2
 800102a:	f000 80a7 	beq.w	800117c <HAL_GPIO_Init+0x184>
 800102e:	d87c      	bhi.n	800112a <HAL_GPIO_Init+0x132>
 8001030:	2d00      	cmp	r5, #0
 8001032:	f000 808e 	beq.w	8001152 <HAL_GPIO_Init+0x15a>
 8001036:	2d01      	cmp	r5, #1
 8001038:	f000 809e 	beq.w	8001178 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800103c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001040:	2cff      	cmp	r4, #255	; 0xff
 8001042:	bf93      	iteet	ls
 8001044:	4682      	movls	sl, r0
 8001046:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800104a:	3d08      	subhi	r5, #8
 800104c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001050:	bf92      	itee	ls
 8001052:	00b5      	lslls	r5, r6, #2
 8001054:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001058:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800105a:	fa09 f805 	lsl.w	r8, r9, r5
 800105e:	ea2b 0808 	bic.w	r8, fp, r8
 8001062:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001066:	bf88      	it	hi
 8001068:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800106c:	ea48 0505 	orr.w	r5, r8, r5
 8001070:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001074:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001078:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800107c:	d04e      	beq.n	800111c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4d47      	ldr	r5, [pc, #284]	; (800119c <HAL_GPIO_Init+0x1a4>)
 8001080:	4f46      	ldr	r7, [pc, #280]	; (800119c <HAL_GPIO_Init+0x1a4>)
 8001082:	69ad      	ldr	r5, [r5, #24]
 8001084:	f026 0803 	bic.w	r8, r6, #3
 8001088:	f045 0501 	orr.w	r5, r5, #1
 800108c:	61bd      	str	r5, [r7, #24]
 800108e:	69bd      	ldr	r5, [r7, #24]
 8001090:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001094:	f005 0501 	and.w	r5, r5, #1
 8001098:	9501      	str	r5, [sp, #4]
 800109a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800109e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80010a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80010a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80010ac:	fa09 f90b 	lsl.w	r9, r9, fp
 80010b0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b4:	4d3a      	ldr	r5, [pc, #232]	; (80011a0 <HAL_GPIO_Init+0x1a8>)
 80010b6:	42a8      	cmp	r0, r5
 80010b8:	d068      	beq.n	800118c <HAL_GPIO_Init+0x194>
 80010ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010be:	42a8      	cmp	r0, r5
 80010c0:	d066      	beq.n	8001190 <HAL_GPIO_Init+0x198>
 80010c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010c6:	42a8      	cmp	r0, r5
 80010c8:	d064      	beq.n	8001194 <HAL_GPIO_Init+0x19c>
 80010ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ce:	42a8      	cmp	r0, r5
 80010d0:	bf0c      	ite	eq
 80010d2:	2503      	moveq	r5, #3
 80010d4:	2504      	movne	r5, #4
 80010d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80010da:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80010de:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010e8:	bf14      	ite	ne
 80010ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ec:	43a5      	biceq	r5, r4
 80010ee:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010f6:	bf14      	ite	ne
 80010f8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fa:	43a5      	biceq	r5, r4
 80010fc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001104:	bf14      	ite	ne
 8001106:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001108:	43a5      	biceq	r5, r4
 800110a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001112:	bf14      	ite	ne
 8001114:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001116:	ea25 0404 	biceq.w	r4, r5, r4
 800111a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800111c:	3601      	adds	r6, #1
 800111e:	2e10      	cmp	r6, #16
 8001120:	f47f af73 	bne.w	800100a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001124:	b003      	add	sp, #12
 8001126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800112a:	2d03      	cmp	r5, #3
 800112c:	d022      	beq.n	8001174 <HAL_GPIO_Init+0x17c>
 800112e:	2d11      	cmp	r5, #17
 8001130:	d184      	bne.n	800103c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001132:	68ca      	ldr	r2, [r1, #12]
 8001134:	3204      	adds	r2, #4
          break;
 8001136:	e781      	b.n	800103c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001138:	4f1a      	ldr	r7, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x1ac>)
 800113a:	42bd      	cmp	r5, r7
 800113c:	d009      	beq.n	8001152 <HAL_GPIO_Init+0x15a>
 800113e:	d812      	bhi.n	8001166 <HAL_GPIO_Init+0x16e>
 8001140:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80011b0 <HAL_GPIO_Init+0x1b8>
 8001144:	454d      	cmp	r5, r9
 8001146:	d004      	beq.n	8001152 <HAL_GPIO_Init+0x15a>
 8001148:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800114c:	454d      	cmp	r5, r9
 800114e:	f47f af75 	bne.w	800103c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001152:	688a      	ldr	r2, [r1, #8]
 8001154:	b1c2      	cbz	r2, 8001188 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001156:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001158:	bf0c      	ite	eq
 800115a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800115e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001162:	2208      	movs	r2, #8
 8001164:	e76a      	b.n	800103c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001166:	4575      	cmp	r5, lr
 8001168:	d0f3      	beq.n	8001152 <HAL_GPIO_Init+0x15a>
 800116a:	4565      	cmp	r5, ip
 800116c:	d0f1      	beq.n	8001152 <HAL_GPIO_Init+0x15a>
 800116e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80011b4 <HAL_GPIO_Init+0x1bc>
 8001172:	e7eb      	b.n	800114c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001174:	2200      	movs	r2, #0
 8001176:	e761      	b.n	800103c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	68ca      	ldr	r2, [r1, #12]
          break;
 800117a:	e75f      	b.n	800103c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117c:	68ca      	ldr	r2, [r1, #12]
 800117e:	3208      	adds	r2, #8
          break;
 8001180:	e75c      	b.n	800103c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001182:	68ca      	ldr	r2, [r1, #12]
 8001184:	320c      	adds	r2, #12
          break;
 8001186:	e759      	b.n	800103c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001188:	2204      	movs	r2, #4
 800118a:	e757      	b.n	800103c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118c:	2500      	movs	r5, #0
 800118e:	e7a2      	b.n	80010d6 <HAL_GPIO_Init+0xde>
 8001190:	2501      	movs	r5, #1
 8001192:	e7a0      	b.n	80010d6 <HAL_GPIO_Init+0xde>
 8001194:	2502      	movs	r5, #2
 8001196:	e79e      	b.n	80010d6 <HAL_GPIO_Init+0xde>
 8001198:	40010400 	.word	0x40010400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10320000 	.word	0x10320000
 80011b0:	10110000 	.word	0x10110000
 80011b4:	10220000 	.word	0x10220000

080011b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b8:	6883      	ldr	r3, [r0, #8]
 80011ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011bc:	bf14      	ite	ne
 80011be:	2001      	movne	r0, #1
 80011c0:	2000      	moveq	r0, #0
 80011c2:	4770      	bx	lr

080011c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	b10a      	cbz	r2, 80011ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	6101      	str	r1, [r0, #16]
 80011c8:	4770      	bx	lr
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	e7fb      	b.n	80011c6 <HAL_GPIO_WritePin+0x2>
	...

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011d4:	6959      	ldr	r1, [r3, #20]
 80011d6:	4201      	tst	r1, r0
 80011d8:	d002      	beq.n	80011e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011dc:	f001 fa7e 	bl	80026dc <HAL_GPIO_EXTI_Callback>
 80011e0:	bd08      	pop	{r3, pc}
 80011e2:	bf00      	nop
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80011e8:	2201      	movs	r2, #1
 80011ea:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_PWR_EnableBkUpAccess+0x8>)
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	4770      	bx	lr
 80011f0:	420e0020 	.word	0x420e0020

080011f4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f4:	6803      	ldr	r3, [r0, #0]
{
 80011f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	07db      	lsls	r3, r3, #31
{
 80011fc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	d410      	bmi.n	8001222 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	079f      	lsls	r7, r3, #30
 8001204:	d45e      	bmi.n	80012c4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	682b      	ldr	r3, [r5, #0]
 8001208:	0719      	lsls	r1, r3, #28
 800120a:	f100 8095 	bmi.w	8001338 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	075a      	lsls	r2, r3, #29
 8001212:	f100 80bf 	bmi.w	8001394 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001216:	69ea      	ldr	r2, [r5, #28]
 8001218:	2a00      	cmp	r2, #0
 800121a:	f040 812d 	bne.w	8001478 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800121e:	2000      	movs	r0, #0
 8001220:	e014      	b.n	800124c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001222:	4c90      	ldr	r4, [pc, #576]	; (8001464 <HAL_RCC_OscConfig+0x270>)
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d007      	beq.n	800123e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x5e>
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	03de      	lsls	r6, r3, #15
 800123c:	d509      	bpl.n	8001252 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	039c      	lsls	r4, r3, #14
 8001242:	d5dd      	bpl.n	8001200 <HAL_RCC_OscConfig+0xc>
 8001244:	686b      	ldr	r3, [r5, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1da      	bne.n	8001200 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
}
 800124c:	b002      	add	sp, #8
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001252:	686b      	ldr	r3, [r5, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d110      	bne.n	800127c <HAL_RCC_OscConfig+0x88>
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001262:	f7ff fba1 	bl	80009a8 <HAL_GetTick>
 8001266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	0398      	lsls	r0, r3, #14
 800126c:	d4c8      	bmi.n	8001200 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126e:	f7ff fb9b 	bl	80009a8 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	2864      	cmp	r0, #100	; 0x64
 8001276:	d9f7      	bls.n	8001268 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001278:	2003      	movs	r0, #3
 800127a:	e7e7      	b.n	800124c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	b99b      	cbnz	r3, 80012a6 <HAL_RCC_OscConfig+0xb2>
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800128e:	f7ff fb8b 	bl	80009a8 <HAL_GetTick>
 8001292:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	0399      	lsls	r1, r3, #14
 8001298:	d5b2      	bpl.n	8001200 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129a:	f7ff fb85 	bl	80009a8 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	2864      	cmp	r0, #100	; 0x64
 80012a2:	d9f7      	bls.n	8001294 <HAL_RCC_OscConfig+0xa0>
 80012a4:	e7e8      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	d103      	bne.n	80012b6 <HAL_RCC_OscConfig+0xc2>
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	6023      	str	r3, [r4, #0]
 80012b4:	e7d1      	b.n	800125a <HAL_RCC_OscConfig+0x66>
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6023      	str	r3, [r4, #0]
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	e7cd      	b.n	8001260 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012c4:	4c67      	ldr	r4, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x270>)
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	f013 0f0c 	tst.w	r3, #12
 80012cc:	d007      	beq.n	80012de <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d110      	bne.n	80012fa <HAL_RCC_OscConfig+0x106>
 80012d8:	6863      	ldr	r3, [r4, #4]
 80012da:	03da      	lsls	r2, r3, #15
 80012dc:	d40d      	bmi.n	80012fa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	079b      	lsls	r3, r3, #30
 80012e2:	d502      	bpl.n	80012ea <HAL_RCC_OscConfig+0xf6>
 80012e4:	692b      	ldr	r3, [r5, #16]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d1af      	bne.n	800124a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	696a      	ldr	r2, [r5, #20]
 80012ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012f6:	6023      	str	r3, [r4, #0]
 80012f8:	e785      	b.n	8001206 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	692a      	ldr	r2, [r5, #16]
 80012fc:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <HAL_RCC_OscConfig+0x274>)
 80012fe:	b16a      	cbz	r2, 800131c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fb50 	bl	80009a8 <HAL_GetTick>
 8001308:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	079f      	lsls	r7, r3, #30
 800130e:	d4ec      	bmi.n	80012ea <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fb4a 	bl	80009a8 <HAL_GetTick>
 8001314:	1b80      	subs	r0, r0, r6
 8001316:	2802      	cmp	r0, #2
 8001318:	d9f7      	bls.n	800130a <HAL_RCC_OscConfig+0x116>
 800131a:	e7ad      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800131c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800131e:	f7ff fb43 	bl	80009a8 <HAL_GetTick>
 8001322:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	0798      	lsls	r0, r3, #30
 8001328:	f57f af6d 	bpl.w	8001206 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132c:	f7ff fb3c 	bl	80009a8 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	2802      	cmp	r0, #2
 8001334:	d9f6      	bls.n	8001324 <HAL_RCC_OscConfig+0x130>
 8001336:	e79f      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001338:	69aa      	ldr	r2, [r5, #24]
 800133a:	4c4a      	ldr	r4, [pc, #296]	; (8001464 <HAL_RCC_OscConfig+0x270>)
 800133c:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_RCC_OscConfig+0x278>)
 800133e:	b1da      	cbz	r2, 8001378 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001344:	f7ff fb30 	bl	80009a8 <HAL_GetTick>
 8001348:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800134c:	079b      	lsls	r3, r3, #30
 800134e:	d50d      	bpl.n	800136c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001350:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x27c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fbb3 f3f2 	udiv	r3, r3, r2
 800135c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800135e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001360:	9b01      	ldr	r3, [sp, #4]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_RCC_OscConfig+0x16a>
 800136a:	e750      	b.n	800120e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fb1c 	bl	80009a8 <HAL_GetTick>
 8001370:	1b80      	subs	r0, r0, r6
 8001372:	2802      	cmp	r0, #2
 8001374:	d9e9      	bls.n	800134a <HAL_RCC_OscConfig+0x156>
 8001376:	e77f      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001378:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800137a:	f7ff fb15 	bl	80009a8 <HAL_GetTick>
 800137e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001382:	079f      	lsls	r7, r3, #30
 8001384:	f57f af43 	bpl.w	800120e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fb0e 	bl	80009a8 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	2802      	cmp	r0, #2
 8001390:	d9f6      	bls.n	8001380 <HAL_RCC_OscConfig+0x18c>
 8001392:	e771      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4c33      	ldr	r4, [pc, #204]	; (8001464 <HAL_RCC_OscConfig+0x270>)
 8001396:	69e3      	ldr	r3, [r4, #28]
 8001398:	00d8      	lsls	r0, r3, #3
 800139a:	d424      	bmi.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800139c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	69e3      	ldr	r3, [r4, #28]
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61e3      	str	r3, [r4, #28]
 80013a6:	69e3      	ldr	r3, [r4, #28]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4e30      	ldr	r6, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x280>)
 80013b2:	6833      	ldr	r3, [r6, #0]
 80013b4:	05d9      	lsls	r1, r3, #23
 80013b6:	d518      	bpl.n	80013ea <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	68eb      	ldr	r3, [r5, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d126      	bne.n	800140c <HAL_RCC_OscConfig+0x218>
 80013be:	6a23      	ldr	r3, [r4, #32]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013c6:	f7ff faef 	bl	80009a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013ce:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	6a23      	ldr	r3, [r4, #32]
 80013d2:	079b      	lsls	r3, r3, #30
 80013d4:	d53f      	bpl.n	8001456 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80013d6:	2f00      	cmp	r7, #0
 80013d8:	f43f af1d 	beq.w	8001216 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	69e3      	ldr	r3, [r4, #28]
 80013de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e2:	61e3      	str	r3, [r4, #28]
 80013e4:	e717      	b.n	8001216 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	2700      	movs	r7, #0
 80013e8:	e7e2      	b.n	80013b0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ea:	6833      	ldr	r3, [r6, #0]
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013f2:	f7ff fad9 	bl	80009a8 <HAL_GetTick>
 80013f6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	6833      	ldr	r3, [r6, #0]
 80013fa:	05da      	lsls	r2, r3, #23
 80013fc:	d4dc      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff fad3 	bl	80009a8 <HAL_GetTick>
 8001402:	eba0 0008 	sub.w	r0, r0, r8
 8001406:	2864      	cmp	r0, #100	; 0x64
 8001408:	d9f6      	bls.n	80013f8 <HAL_RCC_OscConfig+0x204>
 800140a:	e735      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	b9ab      	cbnz	r3, 800143a <HAL_RCC_OscConfig+0x246>
 800140e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6223      	str	r3, [r4, #32]
 800141a:	6a23      	ldr	r3, [r4, #32]
 800141c:	f023 0304 	bic.w	r3, r3, #4
 8001420:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001422:	f7ff fac1 	bl	80009a8 <HAL_GetTick>
 8001426:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	6a23      	ldr	r3, [r4, #32]
 800142a:	0798      	lsls	r0, r3, #30
 800142c:	d5d3      	bpl.n	80013d6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fabb 	bl	80009a8 <HAL_GetTick>
 8001432:	1b80      	subs	r0, r0, r6
 8001434:	4540      	cmp	r0, r8
 8001436:	d9f7      	bls.n	8001428 <HAL_RCC_OscConfig+0x234>
 8001438:	e71e      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	2b05      	cmp	r3, #5
 800143c:	6a23      	ldr	r3, [r4, #32]
 800143e:	d103      	bne.n	8001448 <HAL_RCC_OscConfig+0x254>
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6223      	str	r3, [r4, #32]
 8001446:	e7ba      	b.n	80013be <HAL_RCC_OscConfig+0x1ca>
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6223      	str	r3, [r4, #32]
 800144e:	6a23      	ldr	r3, [r4, #32]
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	e7b6      	b.n	80013c4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff faa7 	bl	80009a8 <HAL_GetTick>
 800145a:	eba0 0008 	sub.w	r0, r0, r8
 800145e:	42b0      	cmp	r0, r6
 8001460:	d9b6      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1dc>
 8001462:	e709      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
 8001464:	40021000 	.word	0x40021000
 8001468:	42420000 	.word	0x42420000
 800146c:	42420480 	.word	0x42420480
 8001470:	2000000c 	.word	0x2000000c
 8001474:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001478:	4c22      	ldr	r4, [pc, #136]	; (8001504 <HAL_RCC_OscConfig+0x310>)
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	f43f aee2 	beq.w	800124a <HAL_RCC_OscConfig+0x56>
 8001486:	2300      	movs	r3, #0
 8001488:	4e1f      	ldr	r6, [pc, #124]	; (8001508 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800148c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148e:	d12b      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001490:	f7ff fa8a 	bl	80009a8 <HAL_GetTick>
 8001494:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	0199      	lsls	r1, r3, #6
 800149a:	d41f      	bmi.n	80014dc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800149c:	6a2b      	ldr	r3, [r5, #32]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a4:	6862      	ldr	r2, [r4, #4]
 80014a6:	68a9      	ldr	r1, [r5, #8]
 80014a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80014ac:	430a      	orrs	r2, r1
 80014ae:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014b2:	6862      	ldr	r2, [r4, #4]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80014ba:	4313      	orrs	r3, r2
 80014bc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80014be:	2301      	movs	r3, #1
 80014c0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014c2:	f7ff fa71 	bl	80009a8 <HAL_GetTick>
 80014c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	019a      	lsls	r2, r3, #6
 80014cc:	f53f aea7 	bmi.w	800121e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa6a 	bl	80009a8 <HAL_GetTick>
 80014d4:	1b40      	subs	r0, r0, r5
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
 80014da:	e6cd      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa64 	bl	80009a8 <HAL_GetTick>
 80014e0:	1bc0      	subs	r0, r0, r7
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9d7      	bls.n	8001496 <HAL_RCC_OscConfig+0x2a2>
 80014e6:	e6c7      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80014e8:	f7ff fa5e 	bl	80009a8 <HAL_GetTick>
 80014ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	f57f ae94 	bpl.w	800121e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f6:	f7ff fa57 	bl	80009a8 <HAL_GetTick>
 80014fa:	1b40      	subs	r0, r0, r5
 80014fc:	2802      	cmp	r0, #2
 80014fe:	d9f6      	bls.n	80014ee <HAL_RCC_OscConfig+0x2fa>
 8001500:	e6ba      	b.n	8001278 <HAL_RCC_OscConfig+0x84>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420060 	.word	0x42420060

0800150c <HAL_RCC_GetSysClockFreq>:
{
 800150c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001510:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001512:	ac02      	add	r4, sp, #8
 8001514:	f103 0510 	add.w	r5, r3, #16
 8001518:	4622      	mov	r2, r4
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	6859      	ldr	r1, [r3, #4]
 800151e:	3308      	adds	r3, #8
 8001520:	c203      	stmia	r2!, {r0, r1}
 8001522:	42ab      	cmp	r3, r5
 8001524:	4614      	mov	r4, r2
 8001526:	d1f7      	bne.n	8001518 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001528:	2301      	movs	r3, #1
 800152a:	f88d 3004 	strb.w	r3, [sp, #4]
 800152e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001530:	4911      	ldr	r1, [pc, #68]	; (8001578 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001532:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001536:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001538:	f003 020c 	and.w	r2, r3, #12
 800153c:	2a08      	cmp	r2, #8
 800153e:	d117      	bne.n	8001570 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001540:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001544:	a806      	add	r0, sp, #24
 8001546:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001548:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800154e:	d50c      	bpl.n	800156a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001550:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001554:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001558:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800155a:	aa06      	add	r2, sp, #24
 800155c:	4413      	add	r3, r2
 800155e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001562:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001566:	b007      	add	sp, #28
 8001568:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_RCC_GetSysClockFreq+0x74>)
 800156c:	4350      	muls	r0, r2
 800156e:	e7fa      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001572:	e7f8      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x5a>
 8001574:	080038f8 	.word	0x080038f8
 8001578:	40021000 	.word	0x40021000
 800157c:	007a1200 	.word	0x007a1200
 8001580:	003d0900 	.word	0x003d0900

08001584 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001584:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_RCC_ClockConfig+0x154>)
{
 8001586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800158a:	6813      	ldr	r3, [r2, #0]
{
 800158c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	428b      	cmp	r3, r1
{
 8001594:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001596:	d32a      	bcc.n	80015ee <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	6829      	ldr	r1, [r5, #0]
 800159a:	078c      	lsls	r4, r1, #30
 800159c:	d434      	bmi.n	8001608 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	07ca      	lsls	r2, r1, #31
 80015a0:	d447      	bmi.n	8001632 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015a2:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x154>)
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	429e      	cmp	r6, r3
 80015ac:	f0c0 8082 	bcc.w	80016b4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	682a      	ldr	r2, [r5, #0]
 80015b2:	4c4a      	ldr	r4, [pc, #296]	; (80016dc <HAL_RCC_ClockConfig+0x158>)
 80015b4:	f012 0f04 	tst.w	r2, #4
 80015b8:	f040 8087 	bne.w	80016ca <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	0713      	lsls	r3, r2, #28
 80015be:	d506      	bpl.n	80015ce <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c0:	6863      	ldr	r3, [r4, #4]
 80015c2:	692a      	ldr	r2, [r5, #16]
 80015c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015cc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ce:	f7ff ff9d 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	4a42      	ldr	r2, [pc, #264]	; (80016e0 <HAL_RCC_ClockConfig+0x15c>)
 80015d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	40d8      	lsrs	r0, r3
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_ClockConfig+0x160>)
 80015e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff f99e 	bl	8000924 <HAL_InitTick>
  return HAL_OK;
 80015e8:	2000      	movs	r0, #0
}
 80015ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f023 0307 	bic.w	r3, r3, #7
 80015f4:	430b      	orrs	r3, r1
 80015f6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	4299      	cmp	r1, r3
 8001600:	d0ca      	beq.n	8001598 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160e:	bf1e      	ittt	ne
 8001610:	685a      	ldrne	r2, [r3, #4]
 8001612:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001616:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161a:	bf42      	ittt	mi
 800161c:	685a      	ldrmi	r2, [r3, #4]
 800161e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001622:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68a8      	ldr	r0, [r5, #8]
 8001628:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800162c:	4302      	orrs	r2, r0
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	e7b5      	b.n	800159e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	686a      	ldr	r2, [r5, #4]
 8001634:	4c29      	ldr	r4, [pc, #164]	; (80016dc <HAL_RCC_ClockConfig+0x158>)
 8001636:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001638:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	d11c      	bne.n	8001676 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	d0df      	beq.n	8001602 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001648:	f023 0303 	bic.w	r3, r3, #3
 800164c:	4313      	orrs	r3, r2
 800164e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001650:	f7ff f9aa 	bl	80009a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001654:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001656:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001658:	2b01      	cmp	r3, #1
 800165a:	d114      	bne.n	8001686 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d09d      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001666:	f7ff f99f 	bl	80009a8 <HAL_GetTick>
 800166a:	1bc0      	subs	r0, r0, r7
 800166c:	4540      	cmp	r0, r8
 800166e:	d9f5      	bls.n	800165c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001670:	2003      	movs	r0, #3
 8001672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001676:	2a02      	cmp	r2, #2
 8001678:	d102      	bne.n	8001680 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800167e:	e7df      	b.n	8001640 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	f013 0f02 	tst.w	r3, #2
 8001684:	e7dc      	b.n	8001640 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001686:	2b02      	cmp	r3, #2
 8001688:	d10f      	bne.n	80016aa <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	6863      	ldr	r3, [r4, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d086      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff f988 	bl	80009a8 <HAL_GetTick>
 8001698:	1bc0      	subs	r0, r0, r7
 800169a:	4540      	cmp	r0, r8
 800169c:	d9f5      	bls.n	800168a <HAL_RCC_ClockConfig+0x106>
 800169e:	e7e7      	b.n	8001670 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff f982 	bl	80009a8 <HAL_GetTick>
 80016a4:	1bc0      	subs	r0, r0, r7
 80016a6:	4540      	cmp	r0, r8
 80016a8:	d8e2      	bhi.n	8001670 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016aa:	6863      	ldr	r3, [r4, #4]
 80016ac:	f013 0f0c 	tst.w	r3, #12
 80016b0:	d1f6      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x11c>
 80016b2:	e776      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f023 0307 	bic.w	r3, r3, #7
 80016ba:	4333      	orrs	r3, r6
 80016bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	429e      	cmp	r6, r3
 80016c6:	d19c      	bne.n	8001602 <HAL_RCC_ClockConfig+0x7e>
 80016c8:	e772      	b.n	80015b0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	68e9      	ldr	r1, [r5, #12]
 80016ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d2:	430b      	orrs	r3, r1
 80016d4:	6063      	str	r3, [r4, #4]
 80016d6:	e771      	b.n	80015bc <HAL_RCC_ClockConfig+0x38>
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08003927 	.word	0x08003927
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RCC_GetPCLK2Freq+0x14>)
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016f6:	6810      	ldr	r0, [r2, #0]
} 
 80016f8:	40d8      	lsrs	r0, r3
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000
 8001700:	08003937 	.word	0x08003937
 8001704:	2000000c 	.word	0x2000000c

08001708 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001708:	6803      	ldr	r3, [r0, #0]
{
 800170a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800170e:	07d9      	lsls	r1, r3, #31
{
 8001710:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001712:	d520      	bpl.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001714:	4c35      	ldr	r4, [pc, #212]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001716:	69e3      	ldr	r3, [r4, #28]
 8001718:	00da      	lsls	r2, r3, #3
 800171a:	d432      	bmi.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800171c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	69e3      	ldr	r3, [r4, #28]
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61e3      	str	r3, [r4, #28]
 8001726:	69e3      	ldr	r3, [r4, #28]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4e2f      	ldr	r6, [pc, #188]	; (80017f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001732:	6833      	ldr	r3, [r6, #0]
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	d526      	bpl.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001738:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800173a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800173e:	d136      	bne.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001740:	6a23      	ldr	r3, [r4, #32]
 8001742:	686a      	ldr	r2, [r5, #4]
 8001744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001748:	4313      	orrs	r3, r2
 800174a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800174c:	b11f      	cbz	r7, 8001756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174e:	69e3      	ldr	r3, [r4, #28]
 8001750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001754:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001756:	6828      	ldr	r0, [r5, #0]
 8001758:	0783      	lsls	r3, r0, #30
 800175a:	d506      	bpl.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800175e:	68a9      	ldr	r1, [r5, #8]
 8001760:	6853      	ldr	r3, [r2, #4]
 8001762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001766:	430b      	orrs	r3, r1
 8001768:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800176a:	f010 0010 	ands.w	r0, r0, #16
 800176e:	d01b      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001772:	68e9      	ldr	r1, [r5, #12]
 8001774:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001776:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001778:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800177c:	430b      	orrs	r3, r1
 800177e:	6053      	str	r3, [r2, #4]
 8001780:	e012      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2700      	movs	r7, #0
 8001784:	e7d4      	b.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001786:	6833      	ldr	r3, [r6, #0]
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800178e:	f7ff f90b 	bl	80009a8 <HAL_GetTick>
 8001792:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	05d8      	lsls	r0, r3, #23
 8001798:	d4ce      	bmi.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff f905 	bl	80009a8 <HAL_GetTick>
 800179e:	eba0 0008 	sub.w	r0, r0, r8
 80017a2:	2864      	cmp	r0, #100	; 0x64
 80017a4:	d9f6      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80017a6:	2003      	movs	r0, #3
}
 80017a8:	b002      	add	sp, #8
 80017aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ae:	686a      	ldr	r2, [r5, #4]
 80017b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d0c3      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80017b8:	2001      	movs	r0, #1
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017bc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80017be:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80017c8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017ca:	07d9      	lsls	r1, r3, #31
 80017cc:	d5b8      	bpl.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8eb 	bl	80009a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	6a23      	ldr	r3, [r4, #32]
 80017da:	079a      	lsls	r2, r3, #30
 80017dc:	d4b0      	bmi.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff f8e3 	bl	80009a8 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	4540      	cmp	r0, r8
 80017e6:	d9f7      	bls.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80017e8:	e7dd      	b.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	42420440 	.word	0x42420440

080017f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80017fe:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001800:	ad02      	add	r5, sp, #8
 8001802:	f103 0610 	add.w	r6, r3, #16
 8001806:	462a      	mov	r2, r5
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	3308      	adds	r3, #8
 800180e:	c203      	stmia	r2!, {r0, r1}
 8001810:	42b3      	cmp	r3, r6
 8001812:	4615      	mov	r5, r2
 8001814:	d1f7      	bne.n	8001806 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001816:	2301      	movs	r3, #1
 8001818:	f88d 3004 	strb.w	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800181e:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001820:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001824:	d047      	beq.n	80018b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001826:	2c10      	cmp	r4, #16
 8001828:	d017      	beq.n	800185a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800182a:	2c01      	cmp	r4, #1
 800182c:	d14f      	bne.n	80018ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800182e:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001834:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001836:	4019      	ands	r1, r3
 8001838:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800183c:	d044      	beq.n	80018c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800183e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001846:	d12d      	bne.n	80018a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001848:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800184c:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800184e:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001852:	bf08      	it	eq
 8001854:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001856:	b006      	add	sp, #24
 8001858:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800185c:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001864:	d0f7      	beq.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001866:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800186a:	a806      	add	r0, sp, #24
 800186c:	4402      	add	r2, r0
 800186e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001872:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001874:	bf41      	itttt	mi
 8001876:	685a      	ldrmi	r2, [r3, #4]
 8001878:	a906      	addmi	r1, sp, #24
 800187a:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800187e:	1852      	addmi	r2, r2, r1
 8001880:	bf44      	itt	mi
 8001882:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001886:	4a15      	ldrmi	r2, [pc, #84]	; (80018dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001888:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800188a:	bf4c      	ite	mi
 800188c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001890:	4a13      	ldrpl	r2, [pc, #76]	; (80018e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001892:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001894:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001898:	d4dd      	bmi.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800189a:	2303      	movs	r3, #3
 800189c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800189e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80018a2:	e7d8      	b.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80018a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a8:	d111      	bne.n	80018ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80018aa:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80018ac:	f24f 4024 	movw	r0, #62500	; 0xf424
 80018b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018b4:	e7cd      	b.n	8001852 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80018b6:	f7ff ff17 	bl	80016e8 <HAL_RCC_GetPCLK2Freq>
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80018c2:	3301      	adds	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	e7ea      	b.n	800189e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 80018c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018cc:	e7c3      	b.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80018ce:	2000      	movs	r0, #0
 80018d0:	e7c1      	b.n	8001856 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80018d2:	bf00      	nop
 80018d4:	08003908 	.word	0x08003908
 80018d8:	40021000 	.word	0x40021000
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	003d0900 	.word	0x003d0900

080018e4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80018e4:	6803      	ldr	r3, [r0, #0]
{
 80018e6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80018e8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80018ea:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80018ec:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80018ee:	b295      	uxth	r5, r2
 80018f0:	b28c      	uxth	r4, r1
 80018f2:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80018f4:	bf1d      	ittte	ne
 80018f6:	69d8      	ldrne	r0, [r3, #28]
 80018f8:	b280      	uxthne	r0, r0
 80018fa:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80018fe:	b280      	uxtheq	r0, r0
 8001900:	bf08      	it	eq
 8001902:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8001906:	bd30      	pop	{r4, r5, pc}

08001908 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800190e:	b29b      	uxth	r3, r3
}
 8001910:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001914:	4770      	bx	lr

08001916 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001916:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001918:	2809      	cmp	r0, #9
 800191a:	d803      	bhi.n	8001924 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800191c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001920:	b2c0      	uxtb	r0, r0
 8001922:	4770      	bx	lr
    Value -= 10U;
 8001924:	380a      	subs	r0, #10
    bcdhigh++;
 8001926:	3301      	adds	r3, #1
    Value -= 10U;
 8001928:	b2c0      	uxtb	r0, r0
 800192a:	e7f5      	b.n	8001918 <RTC_ByteToBcd2+0x2>

0800192c <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800192c:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800192e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8001930:	f000 000f 	and.w	r0, r0, #15
 8001934:	fb02 0003 	mla	r0, r2, r3, r0
}
 8001938:	b2c0      	uxtb	r0, r0
 800193a:	4770      	bx	lr

0800193c <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 800193c:	2902      	cmp	r1, #2
{
 800193e:	b570      	push	{r4, r5, r6, lr}
 8001940:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8001944:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8001948:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 800194c:	d81a      	bhi.n	8001984 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 800194e:	434b      	muls	r3, r1
 8001950:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8001954:	fbb3 f0f6 	udiv	r0, r3, r6
 8001958:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800195c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001960:	3204      	adds	r2, #4
 8001962:	442a      	add	r2, r5
 8001964:	4410      	add	r0, r2
 8001966:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800196a:	4418      	add	r0, r3
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	fbb4 f4f3 	udiv	r4, r4, r3
 8001972:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8001974:	2307      	movs	r3, #7
 8001976:	fbb0 f3f3 	udiv	r3, r0, r3
 800197a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800197e:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8001980:	b2c0      	uxtb	r0, r0
 8001982:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8001984:	fb03 f001 	mul.w	r0, r3, r1
 8001988:	fbb0 f0f6 	udiv	r0, r0, r6
 800198c:	3202      	adds	r2, #2
 800198e:	442a      	add	r2, r5
 8001990:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001994:	4410      	add	r0, r2
 8001996:	2264      	movs	r2, #100	; 0x64
 8001998:	fbb5 f3f3 	udiv	r3, r5, r3
 800199c:	fbb5 f2f2 	udiv	r2, r5, r2
 80019a0:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 80019a4:	4418      	add	r0, r3
 80019a6:	1a80      	subs	r0, r0, r2
 80019a8:	e7e4      	b.n	8001974 <RTC_WeekDayNum+0x38>

080019aa <RTC_EnterInitMode>:
{
 80019aa:	b538      	push	{r3, r4, r5, lr}
 80019ac:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80019ae:	f7fe fffb 	bl	80009a8 <HAL_GetTick>
 80019b2:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	0692      	lsls	r2, r2, #26
 80019ba:	d505      	bpl.n	80019c8 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019bc:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 80019be:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019c0:	f042 0210 	orr.w	r2, r2, #16
 80019c4:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80019c8:	f7fe ffee 	bl	80009a8 <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019d2:	d9ef      	bls.n	80019b4 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80019d4:	2003      	movs	r0, #3
}
 80019d6:	bd38      	pop	{r3, r4, r5, pc}

080019d8 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019d8:	6802      	ldr	r2, [r0, #0]
{
 80019da:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019dc:	6853      	ldr	r3, [r2, #4]
{
 80019de:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019e0:	f023 0310 	bic.w	r3, r3, #16
 80019e4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80019e6:	f7fe ffdf 	bl	80009a8 <HAL_GetTick>
 80019ea:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	069b      	lsls	r3, r3, #26
 80019f2:	d501      	bpl.n	80019f8 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 80019f4:	2000      	movs	r0, #0
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80019f8:	f7fe ffd6 	bl	80009a8 <HAL_GetTick>
 80019fc:	1b40      	subs	r0, r0, r5
 80019fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a02:	d9f3      	bls.n	80019ec <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001a04:	2003      	movs	r0, #3
}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}

08001a08 <RTC_WriteTimeCounter>:
{
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4605      	mov	r5, r0
 8001a0c:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a0e:	f7ff ffcc 	bl	80019aa <RTC_EnterInitMode>
 8001a12:	b958      	cbnz	r0, 8001a2c <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a18:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001a1a:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a1c:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a1e:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a20:	f7ff ffda 	bl	80019d8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001a24:	3000      	adds	r0, #0
 8001a26:	bf18      	it	ne
 8001a28:	2001      	movne	r0, #1
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	2001      	movs	r0, #1
}
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}

08001a30 <RTC_WriteAlarmCounter>:
{
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	4605      	mov	r5, r0
 8001a34:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a36:	f7ff ffb8 	bl	80019aa <RTC_EnterInitMode>
 8001a3a:	b958      	cbnz	r0, 8001a54 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001a40:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001a42:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a44:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001a46:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a48:	f7ff ffc6 	bl	80019d8 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001a4c:	3000      	adds	r0, #0
 8001a4e:	bf18      	it	ne
 8001a50:	2001      	movne	r0, #1
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	2001      	movs	r0, #1
}
 8001a56:	bd38      	pop	{r3, r4, r5, pc}

08001a58 <HAL_RTC_SetTime>:
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	b1e0      	cbz	r0, 8001a98 <HAL_RTC_SetTime+0x40>
 8001a5e:	b1d9      	cbz	r1, 8001a98 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8001a60:	7c03      	ldrb	r3, [r0, #16]
 8001a62:	2602      	movs	r6, #2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d046      	beq.n	8001af6 <HAL_RTC_SetTime+0x9e>
 8001a68:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a6a:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8001a6c:	7403      	strb	r3, [r0, #16]
 8001a6e:	7808      	ldrb	r0, [r1, #0]
 8001a70:	784e      	ldrb	r6, [r1, #1]
 8001a72:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8001a74:	b992      	cbnz	r2, 8001a9c <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8001a76:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8001a7c:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a7e:	fb03 5000 	mla	r0, r3, r0, r5
 8001a82:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff ffbe 	bl	8001a08 <RTC_WriteTimeCounter>
 8001a8c:	4606      	mov	r6, r0
 8001a8e:	b1b0      	cbz	r0, 8001abe <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a90:	2304      	movs	r3, #4
 8001a92:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001a94:	2300      	movs	r3, #0
 8001a96:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8001a98:	2601      	movs	r6, #1
 8001a9a:	e02c      	b.n	8001af6 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001a9c:	f7ff ff46 	bl	800192c <RTC_Bcd2ToByte>
 8001aa0:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f7ff ff42 	bl	800192c <RTC_Bcd2ToByte>
 8001aa8:	233c      	movs	r3, #60	; 0x3c
 8001aaa:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001aac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ab0:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	f7ff ff39 	bl	800192c <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001aba:	4405      	add	r5, r0
 8001abc:	e7e2      	b.n	8001a84 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001abe:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001ac0:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001ac2:	6853      	ldr	r3, [r2, #4]
 8001ac4:	f023 0305 	bic.w	r3, r3, #5
 8001ac8:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001aca:	f7ff ff1d 	bl	8001908 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ace:	1c43      	adds	r3, r0, #1
 8001ad0:	d00d      	beq.n	8001aee <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8001ad2:	4285      	cmp	r5, r0
 8001ad4:	d90b      	bls.n	8001aee <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ad6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001ada:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ffa6 	bl	8001a30 <RTC_WriteAlarmCounter>
 8001ae4:	b118      	cbz	r0, 8001aee <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae6:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001ae8:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001aea:	7463      	strb	r3, [r4, #17]
 8001aec:	e7d4      	b.n	8001a98 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8001af2:	2300      	movs	r3, #0
 8001af4:	7423      	strb	r3, [r4, #16]
}
 8001af6:	4630      	mov	r0, r6
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001afc <HAL_RTC_GetTime>:
{
 8001afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b00:	460d      	mov	r5, r1
 8001b02:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8001b04:	4604      	mov	r4, r0
 8001b06:	b910      	cbnz	r0, 8001b0e <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	d0fa      	beq.n	8001b08 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001b12:	6803      	ldr	r3, [r0, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	075e      	lsls	r6, r3, #29
 8001b18:	d4f6      	bmi.n	8001b08 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001b1a:	f7ff fee3 	bl	80018e4 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8001b1e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001b22:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001b26:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001b28:	fb02 0213 	mls	r2, r2, r3, r0
 8001b2c:	203c      	movs	r0, #60	; 0x3c
 8001b2e:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001b32:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8001b36:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001b38:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001b3a:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8001b3c:	f240 8085 	bls.w	8001c4a <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8001b40:	2118      	movs	r1, #24
 8001b42:	fbb3 f2f1 	udiv	r2, r3, r1
 8001b46:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b4a:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 8001b4c:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b4e:	f7ff fedb 	bl	8001908 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001b52:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b54:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001b56:	d004      	beq.n	8001b62 <HAL_RTC_GetTime+0x66>
 8001b58:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001b5a:	bf2c      	ite	cs
 8001b5c:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8001b60:	1bc6      	subcc	r6, r0, r7
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001b64:	4620      	mov	r0, r4
 8001b66:	fbb7 f9f3 	udiv	r9, r7, r3
 8001b6a:	fb03 7919 	mls	r9, r3, r9, r7
 8001b6e:	4649      	mov	r1, r9
 8001b70:	f7ff ff4a 	bl	8001a08 <RTC_WriteTimeCounter>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d1c7      	bne.n	8001b08 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b78:	1c72      	adds	r2, r6, #1
 8001b7a:	d02f      	beq.n	8001bdc <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b7c:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff ff55 	bl	8001a30 <RTC_WriteAlarmCounter>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d1be      	bne.n	8001b08 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8001b8c:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8001b8e:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8001b92:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8001b96:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001b9a:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8001b9e:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8001ba0:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8001ba2:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001ba4:	42b7      	cmp	r7, r6
 8001ba6:	d11b      	bne.n	8001be0 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8001ba8:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8001baa:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8001bac:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8001bae:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8001bb0:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001bb2:	f7ff fec3 	bl	800193c <RTC_WeekDayNum>
 8001bb6:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 8001bb8:	f1b8 0f00 	cmp.w	r8, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001bbe:	7828      	ldrb	r0, [r5, #0]
 8001bc0:	f7ff fea9 	bl	8001916 <RTC_ByteToBcd2>
 8001bc4:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001bc6:	7868      	ldrb	r0, [r5, #1]
 8001bc8:	f7ff fea5 	bl	8001916 <RTC_ByteToBcd2>
 8001bcc:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8001bce:	78a8      	ldrb	r0, [r5, #2]
 8001bd0:	f7ff fea1 	bl	8001916 <RTC_ByteToBcd2>
 8001bd4:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001bdc:	4631      	mov	r1, r6
 8001bde:	e7cf      	b.n	8001b80 <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001be0:	1e4b      	subs	r3, r1, #1
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	d835      	bhi.n	8001c52 <HAL_RTC_GetTime+0x156>
 8001be6:	fa29 f303 	lsr.w	r3, r9, r3
 8001bea:	07db      	lsls	r3, r3, #31
 8001bec:	d42f      	bmi.n	8001c4e <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001bee:	f021 0302 	bic.w	r3, r1, #2
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d001      	beq.n	8001bfa <HAL_RTC_GetTime+0xfe>
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	d104      	bne.n	8001c04 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 8001bfa:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8001bfc:	d906      	bls.n	8001c0c <HAL_RTC_GetTime+0x110>
        month++;
 8001bfe:	3101      	adds	r1, #1
        day = 1U;
 8001c00:	2201      	movs	r2, #1
 8001c02:	e02d      	b.n	8001c60 <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8001c04:	2902      	cmp	r1, #2
 8001c06:	d12b      	bne.n	8001c60 <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8001c08:	2a1b      	cmp	r2, #27
 8001c0a:	d801      	bhi.n	8001c10 <HAL_RTC_GetTime+0x114>
        day++;
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	e027      	b.n	8001c60 <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8001c10:	2a1c      	cmp	r2, #28
 8001c12:	d113      	bne.n	8001c3c <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8001c14:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8001c16:	0793      	lsls	r3, r2, #30
 8001c18:	d112      	bne.n	8001c40 <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 8001c1a:	fbb2 f3fe 	udiv	r3, r2, lr
 8001c1e:	fb0e 2313 	mls	r3, lr, r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b97b      	cbnz	r3, 8001c46 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8001c26:	fbb2 f3fc 	udiv	r3, r2, ip
 8001c2a:	fb0c 2313 	mls	r3, ip, r3, r2
 8001c2e:	b29b      	uxth	r3, r3
          day++;
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf16      	itet	ne
 8001c34:	2201      	movne	r2, #1
 8001c36:	221d      	moveq	r2, #29
 8001c38:	2103      	movne	r1, #3
 8001c3a:	e011      	b.n	8001c60 <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 8001c3c:	2a1d      	cmp	r2, #29
 8001c3e:	d10f      	bne.n	8001c60 <HAL_RTC_GetTime+0x164>
          day = 1U;
 8001c40:	2201      	movs	r2, #1
          month++;
 8001c42:	2103      	movs	r1, #3
 8001c44:	e00c      	b.n	8001c60 <HAL_RTC_GetTime+0x164>
          day++;
 8001c46:	221d      	movs	r2, #29
 8001c48:	e00a      	b.n	8001c60 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 8001c4a:	702b      	strb	r3, [r5, #0]
 8001c4c:	e7b4      	b.n	8001bb8 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 8001c4e:	2a1e      	cmp	r2, #30
 8001c50:	e7d4      	b.n	8001bfc <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8001c52:	290c      	cmp	r1, #12
 8001c54:	d1cb      	bne.n	8001bee <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8001c56:	2a1e      	cmp	r2, #30
 8001c58:	d9d8      	bls.n	8001c0c <HAL_RTC_GetTime+0x110>
          day = 1U;
 8001c5a:	2201      	movs	r2, #1
          month = 1U;
 8001c5c:	4611      	mov	r1, r2
          year++;
 8001c5e:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8001c60:	3601      	adds	r6, #1
 8001c62:	e79f      	b.n	8001ba4 <HAL_RTC_GetTime+0xa8>
 8001c64:	00015180 	.word	0x00015180

08001c68 <HAL_RTC_WaitForSynchro>:
{
 8001c68:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	b1a8      	cbz	r0, 8001c9a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6853      	ldr	r3, [r2, #4]
 8001c72:	f023 0308 	bic.w	r3, r3, #8
 8001c76:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001c78:	f7fe fe96 	bl	80009a8 <HAL_GetTick>
 8001c7c:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	071b      	lsls	r3, r3, #28
 8001c84:	d501      	bpl.n	8001c8a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001c8a:	f7fe fe8d 	bl	80009a8 <HAL_GetTick>
 8001c8e:	1b40      	subs	r0, r0, r5
 8001c90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c94:	d9f3      	bls.n	8001c7e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001c96:	2003      	movs	r0, #3
}
 8001c98:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ca0 <HAL_RTC_Init>:
{
 8001ca0:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	b170      	cbz	r0, 8001cc4 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ca6:	7c43      	ldrb	r3, [r0, #17]
 8001ca8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cac:	b913      	cbnz	r3, 8001cb4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001cae:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001cb0:	f001 f896 	bl	8002de0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001cb4:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cb6:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001cb8:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cba:	f7ff ffd5 	bl	8001c68 <HAL_RTC_WaitForSynchro>
 8001cbe:	b118      	cbz	r0, 8001cc8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
}
 8001cc6:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fe6e 	bl	80019aa <RTC_EnterInitMode>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d1f6      	bne.n	8001cc0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001cd2:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001cd4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001cd6:	6853      	ldr	r3, [r2, #4]
 8001cd8:	f023 0307 	bic.w	r3, r3, #7
 8001cdc:	6053      	str	r3, [r2, #4]
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001ce0:	b118      	cbz	r0, 8001cea <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001ce2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ce4:	f021 0101 	bic.w	r1, r1, #1
 8001ce8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001cea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cec:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001cf4:	6860      	ldr	r0, [r4, #4]
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fd7c 	bl	80017f8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d0dd      	beq.n	8001cc0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001d04:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	6893      	ldr	r3, [r2, #8]
 8001d0a:	f023 030f 	bic.w	r3, r3, #15
 8001d0e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001d12:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001d14:	68d3      	ldr	r3, [r2, #12]
 8001d16:	b280      	uxth	r0, r0
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	4318      	orrs	r0, r3
 8001d1e:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fe59 	bl	80019d8 <RTC_ExitInitMode>
 8001d26:	2301      	movs	r3, #1
 8001d28:	b110      	cbz	r0, 8001d30 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	7462      	strb	r2, [r4, #17]
 8001d2e:	e7c9      	b.n	8001cc4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001d30:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d32:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001d34:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001d36:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40006c00 	.word	0x40006c00

08001d40 <HAL_RTCEx_SetSecond_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
  /* Check input parameters */
  if(hrtc == NULL)
 8001d40:	b180      	cbz	r0, 8001d64 <HAL_RTCEx_SetSecond_IT+0x24>
  {
     return HAL_ERROR;
  }
  
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d42:	7c03      	ldrb	r3, [r0, #16]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f04f 0302 	mov.w	r3, #2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RTCEx_SetSecond_IT+0x20>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8001d4c:	6802      	ldr	r2, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d4e:	7443      	strb	r3, [r0, #17]
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
  
  hrtc->State = HAL_RTC_STATE_READY;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	7443      	strb	r3, [r0, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	7403      	strb	r3, [r0, #16]
  __HAL_LOCK(hrtc);
 8001d60:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d62:	4770      	bx	lr
     return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
 8001d66:	4770      	bx	lr

08001d68 <HAL_RTCEx_RTCEventCallback>:
 8001d68:	4770      	bx	lr

08001d6a <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8001d6a:	4770      	bx	lr

08001d6c <HAL_RTCEx_RTCIRQHandler>:
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001d6c:	6803      	ldr	r3, [r0, #0]
{
 8001d6e:	b510      	push	{r4, lr}
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001d70:	681a      	ldr	r2, [r3, #0]
{
 8001d72:	4604      	mov	r4, r0
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001d74:	07d1      	lsls	r1, r2, #31
 8001d76:	d511      	bpl.n	8001d9c <HAL_RTCEx_RTCIRQHandler+0x30>
    if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	07d2      	lsls	r2, r2, #31
 8001d7c:	d50e      	bpl.n	8001d9c <HAL_RTCEx_RTCIRQHandler+0x30>
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	075b      	lsls	r3, r3, #29
 8001d82:	d50c      	bpl.n	8001d9e <HAL_RTCEx_RTCIRQHandler+0x32>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8001d84:	f7ff fff1 	bl	8001d6a <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR; 
 8001d90:	2304      	movs	r3, #4
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001d92:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY; 
 8001d96:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8001d9e:	f7ff ffe3 	bl	8001d68 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY; 
 8001da2:	2301      	movs	r3, #1
 8001da4:	e7f5      	b.n	8001d92 <HAL_RTCEx_RTCIRQHandler+0x26>
	...

08001da8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001da8:	6a03      	ldr	r3, [r0, #32]
{
 8001daa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001db6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001db8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001dbe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dc0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dc2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001dc6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dc8:	4d0a      	ldr	r5, [pc, #40]	; (8001df4 <TIM_OC1_SetConfig+0x4c>)
 8001dca:	42a8      	cmp	r0, r5
 8001dcc:	d10b      	bne.n	8001de6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dd0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001dd4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dd6:	698e      	ldr	r6, [r1, #24]
 8001dd8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dda:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dde:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001de0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001de8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dea:	684a      	ldr	r2, [r1, #4]
 8001dec:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dee:	6203      	str	r3, [r0, #32]
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001df8:	6a03      	ldr	r3, [r0, #32]
{
 8001dfa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e06:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e0a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e0e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e10:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e16:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e1a:	4d0b      	ldr	r5, [pc, #44]	; (8001e48 <TIM_OC3_SetConfig+0x50>)
 8001e1c:	42a8      	cmp	r0, r5
 8001e1e:	d10d      	bne.n	8001e3c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e20:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e2a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e2c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e2e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e32:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e38:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e3c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e3e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e40:	684a      	ldr	r2, [r1, #4]
 8001e42:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e44:	6203      	str	r3, [r0, #32]
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	40012c00 	.word	0x40012c00

08001e4c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e4c:	6a03      	ldr	r3, [r0, #32]
{
 8001e4e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e5a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e5e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e66:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e6c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e70:	4d06      	ldr	r5, [pc, #24]	; (8001e8c <TIM_OC4_SetConfig+0x40>)
 8001e72:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001e74:	bf02      	ittt	eq
 8001e76:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e78:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001e7c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e80:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e82:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e84:	684a      	ldr	r2, [r1, #4]
 8001e86:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e88:	6203      	str	r3, [r0, #32]
 8001e8a:	bd30      	pop	{r4, r5, pc}
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e90:	6803      	ldr	r3, [r0, #0]
}
 8001e92:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_PWM_MspInit>:
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ea8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001eac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f04f 0302 	mov.w	r3, #2
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_TIM_ConfigClockSource+0x48>
 8001eb6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ebc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001ebe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ec2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ec8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ecc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ece:	680a      	ldr	r2, [r1, #0]
 8001ed0:	2a40      	cmp	r2, #64	; 0x40
 8001ed2:	d079      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0x120>
 8001ed4:	d819      	bhi.n	8001f0a <HAL_TIM_ConfigClockSource+0x62>
 8001ed6:	2a10      	cmp	r2, #16
 8001ed8:	f000 8093 	beq.w	8002002 <HAL_TIM_ConfigClockSource+0x15a>
 8001edc:	d80a      	bhi.n	8001ef4 <HAL_TIM_ConfigClockSource+0x4c>
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	f000 8089 	beq.w	8001ff6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001eea:	2300      	movs	r3, #0
 8001eec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001ef0:	4618      	mov	r0, r3
}
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ef4:	2a20      	cmp	r2, #32
 8001ef6:	f000 808a 	beq.w	800200e <HAL_TIM_ConfigClockSource+0x166>
 8001efa:	2a30      	cmp	r2, #48	; 0x30
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001efe:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f04:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f08:	e036      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f0a:	2a70      	cmp	r2, #112	; 0x70
 8001f0c:	d036      	beq.n	8001f7c <HAL_TIM_ConfigClockSource+0xd4>
 8001f0e:	d81b      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0xa0>
 8001f10:	2a50      	cmp	r2, #80	; 0x50
 8001f12:	d042      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0xf2>
 8001f14:	2a60      	cmp	r2, #96	; 0x60
 8001f16:	d1e5      	bne.n	8001ee4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f18:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f1a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f20:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f22:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f24:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f26:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f28:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f30:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f34:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f38:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f3a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f3c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f42:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f46:	e017      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f4c:	d011      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0xca>
 8001f4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f52:	d1c7      	bne.n	8001ee4 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f54:	688a      	ldr	r2, [r1, #8]
 8001f56:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f58:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f5a:	68c9      	ldr	r1, [r1, #12]
 8001f5c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f5e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f66:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f68:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f70:	e002      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	e7b3      	b.n	8001ee4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f7c:	688a      	ldr	r2, [r1, #8]
 8001f7e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f80:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f82:	68c9      	ldr	r1, [r1, #12]
 8001f84:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f86:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f8e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f90:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f92:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f94:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001f98:	e7ee      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9a:	684c      	ldr	r4, [r1, #4]
 8001f9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f9e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa6:	f025 0501 	bic.w	r5, r5, #1
 8001faa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fac:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001fae:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fb4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fba:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fbc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001fc2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001fc6:	e7d7      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc8:	684c      	ldr	r4, [r1, #4]
 8001fca:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fcc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fce:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fd0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd4:	f025 0501 	bic.w	r5, r5, #1
 8001fd8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fda:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001fdc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ff0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001ff4:	e7c0      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001ff6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ff8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ffc:	f042 0207 	orr.w	r2, r2, #7
 8002000:	e7ba      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002002:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002004:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002008:	f042 0217 	orr.w	r2, r2, #23
 800200c:	e7b4      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800200e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002014:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002018:	e7ae      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0xd0>

0800201a <HAL_TIM_PeriodElapsedCallback>:
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_OC_DelayElapsedCallback>:
 800201c:	4770      	bx	lr

0800201e <HAL_TIM_IC_CaptureCallback>:
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002020:	4770      	bx	lr

08002022 <HAL_TIM_TriggerCallback>:
 8002022:	4770      	bx	lr

08002024 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002024:	6803      	ldr	r3, [r0, #0]
{
 8002026:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002028:	691a      	ldr	r2, [r3, #16]
{
 800202a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800202c:	0791      	lsls	r1, r2, #30
 800202e:	d50e      	bpl.n	800204e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	0792      	lsls	r2, r2, #30
 8002034:	d50b      	bpl.n	800204e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002036:	f06f 0202 	mvn.w	r2, #2
 800203a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002040:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002042:	079b      	lsls	r3, r3, #30
 8002044:	d077      	beq.n	8002136 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002046:	f7ff ffea 	bl	800201e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	2300      	movs	r3, #0
 800204c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	0750      	lsls	r0, r2, #29
 8002054:	d510      	bpl.n	8002078 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	0751      	lsls	r1, r2, #29
 800205a:	d50d      	bpl.n	8002078 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205c:	f06f 0204 	mvn.w	r2, #4
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002062:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002064:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002066:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002068:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800206c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206e:	d068      	beq.n	8002142 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002070:	f7ff ffd5 	bl	800201e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002074:	2300      	movs	r3, #0
 8002076:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	0712      	lsls	r2, r2, #28
 800207e:	d50f      	bpl.n	80020a0 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	0710      	lsls	r0, r2, #28
 8002084:	d50c      	bpl.n	80020a0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002086:	f06f 0208 	mvn.w	r2, #8
 800208a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002090:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002092:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002094:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002096:	d05a      	beq.n	800214e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002098:	f7ff ffc1 	bl	800201e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209c:	2300      	movs	r3, #0
 800209e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	06d2      	lsls	r2, r2, #27
 80020a6:	d510      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	06d0      	lsls	r0, r2, #27
 80020ac:	d50d      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ae:	f06f 0210 	mvn.w	r2, #16
 80020b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ba:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	d04b      	beq.n	800215a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	f7ff ffac 	bl	800201e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	2300      	movs	r3, #0
 80020c8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	07d1      	lsls	r1, r2, #31
 80020d0:	d508      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	07d2      	lsls	r2, r2, #31
 80020d6:	d505      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80020dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e0:	f7ff ff9b 	bl	800201a <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	0610      	lsls	r0, r2, #24
 80020ea:	d508      	bpl.n	80020fe <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	0611      	lsls	r1, r2, #24
 80020f0:	d505      	bpl.n	80020fe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80020f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	f000 f9a2 	bl	8002442 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	0652      	lsls	r2, r2, #25
 8002104:	d508      	bpl.n	8002118 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	0650      	lsls	r0, r2, #25
 800210a:	d505      	bpl.n	8002118 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002112:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002114:	f7ff ff85 	bl	8002022 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	0691      	lsls	r1, r2, #26
 800211e:	d522      	bpl.n	8002166 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	0692      	lsls	r2, r2, #26
 8002124:	d51f      	bpl.n	8002166 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002126:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800212a:	4620      	mov	r0, r4
}
 800212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002132:	f000 b985 	b.w	8002440 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	f7ff ff71 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff ff70 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
 8002140:	e783      	b.n	800204a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	f7ff ff6b 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff ff6a 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
 800214c:	e792      	b.n	8002074 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	f7ff ff65 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff ff64 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
 8002158:	e7a0      	b.n	800209c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	f7ff ff5f 	bl	800201c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff ff5e 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
 8002164:	e7af      	b.n	80020c6 <HAL_TIM_IRQHandler+0xa2>
 8002166:	bd10      	pop	{r4, pc}

08002168 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800216a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216c:	4290      	cmp	r0, r2
 800216e:	d00a      	beq.n	8002186 <TIM_Base_SetConfig+0x1e>
 8002170:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0x1e>
 8002176:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800217a:	4290      	cmp	r0, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0x1e>
 800217e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002182:	4290      	cmp	r0, r2
 8002184:	d115      	bne.n	80021b2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002186:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800218c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <TIM_Base_SetConfig+0x6c>)
 8002190:	4290      	cmp	r0, r2
 8002192:	d00a      	beq.n	80021aa <TIM_Base_SetConfig+0x42>
 8002194:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002198:	d007      	beq.n	80021aa <TIM_Base_SetConfig+0x42>
 800219a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800219e:	4290      	cmp	r0, r2
 80021a0:	d003      	beq.n	80021aa <TIM_Base_SetConfig+0x42>
 80021a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a6:	4290      	cmp	r0, r2
 80021a8:	d103      	bne.n	80021b2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021aa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b0:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021b2:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80021b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021bc:	688b      	ldr	r3, [r1, #8]
 80021be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021c0:	680b      	ldr	r3, [r1, #0]
 80021c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <TIM_Base_SetConfig+0x6c>)
 80021c6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80021c8:	bf04      	itt	eq
 80021ca:	690b      	ldreq	r3, [r1, #16]
 80021cc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021ce:	2301      	movs	r3, #1
 80021d0:	6143      	str	r3, [r0, #20]
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00

080021d8 <HAL_TIM_Base_Init>:
{
 80021d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80021da:	4604      	mov	r4, r0
 80021dc:	b1a0      	cbz	r0, 8002208 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80021de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021e6:	b91b      	cbnz	r3, 80021f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80021e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021ec:	f000 fe1c 	bl	8002e28 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80021f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80021f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f8:	1d21      	adds	r1, r4, #4
 80021fa:	f7ff ffb5 	bl	8002168 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80021fe:	2301      	movs	r3, #1
  return HAL_OK;
 8002200:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002206:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002208:	2001      	movs	r0, #1
}
 800220a:	bd10      	pop	{r4, pc}

0800220c <HAL_TIM_PWM_Init>:
{
 800220c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800220e:	4604      	mov	r4, r0
 8002210:	b1a0      	cbz	r0, 800223c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002212:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002216:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800221a:	b91b      	cbnz	r3, 8002224 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800221c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002220:	f7ff fe41 	bl	8001ea6 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002224:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002226:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222c:	1d21      	adds	r1, r4, #4
 800222e:	f7ff ff9b 	bl	8002168 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002232:	2301      	movs	r3, #1
  return HAL_OK;
 8002234:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002236:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800223a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
}
 800223e:	bd10      	pop	{r4, pc}

08002240 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002240:	6a03      	ldr	r3, [r0, #32]
{
 8002242:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002244:	f023 0310 	bic.w	r3, r3, #16
 8002248:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800224a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800224c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800224e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002250:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002252:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002256:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800225a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800225c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002260:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002264:	4d0b      	ldr	r5, [pc, #44]	; (8002294 <TIM_OC2_SetConfig+0x54>)
 8002266:	42a8      	cmp	r0, r5
 8002268:	d10d      	bne.n	8002286 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800226a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800226c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002270:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002274:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002276:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002278:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800227c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800227e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002282:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002286:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002288:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800228a:	684a      	ldr	r2, [r1, #4]
 800228c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800228e:	6203      	str	r3, [r0, #32]
 8002290:	bd70      	pop	{r4, r5, r6, pc}
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00

08002298 <HAL_TIM_PWM_ConfigChannel>:
{
 8002298:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800229a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800229e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f04f 0002 	mov.w	r0, #2
 80022a6:	d025      	beq.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80022a8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80022b2:	2a0c      	cmp	r2, #12
 80022b4:	d818      	bhi.n	80022e8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80022b6:	e8df f002 	tbb	[pc, r2]
 80022ba:	1707      	.short	0x1707
 80022bc:	171e1717 	.word	0x171e1717
 80022c0:	172f1717 	.word	0x172f1717
 80022c4:	1717      	.short	0x1717
 80022c6:	40          	.byte	0x40
 80022c7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f7ff fd6d 	bl	8001da8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	f042 0208 	orr.w	r2, r2, #8
 80022d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022e6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80022ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022f4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f7ff ffa2 	bl	8002240 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002316:	e7e6      	b.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	f7ff fd6d 	bl	8001df8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800231e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002320:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	f042 0208 	orr.w	r2, r2, #8
 8002328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	f022 0204 	bic.w	r2, r2, #4
 8002330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002336:	61da      	str	r2, [r3, #28]
    break;
 8002338:	e7d6      	b.n	80022e8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800233a:	6820      	ldr	r0, [r4, #0]
 800233c:	f7ff fd86 	bl	8001e4c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002340:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002342:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800235a:	e7ec      	b.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800235c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800235c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800235e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002360:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002362:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002364:	ea23 0304 	bic.w	r3, r3, r4
 8002368:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800236a:	6a03      	ldr	r3, [r0, #32]
 800236c:	408a      	lsls	r2, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	6202      	str	r2, [r0, #32]
 8002372:	bd10      	pop	{r4, pc}

08002374 <HAL_TIM_PWM_Start>:
{
 8002374:	b510      	push	{r4, lr}
 8002376:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002378:	2201      	movs	r2, #1
 800237a:	6800      	ldr	r0, [r0, #0]
 800237c:	f7ff ffee 	bl	800235c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_TIM_PWM_Start+0x28>)
}
 8002384:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002386:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002388:	bf02      	ittt	eq
 800238a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800238c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002390:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
}
 800239a:	bd10      	pop	{r4, pc}
 800239c:	40012c00 	.word	0x40012c00

080023a0 <HAL_TIM_PWM_Stop>:
{
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6800      	ldr	r0, [r0, #0]
 80023a8:	f7ff ffd8 	bl	800235c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_TIM_PWM_Stop+0x58>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10d      	bne.n	80023d0 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80023b4:	f241 1211 	movw	r2, #4369	; 0x1111
 80023b8:	6a19      	ldr	r1, [r3, #32]
 80023ba:	4211      	tst	r1, r2
 80023bc:	d108      	bne.n	80023d0 <HAL_TIM_PWM_Stop+0x30>
 80023be:	f240 4244 	movw	r2, #1092	; 0x444
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	4211      	tst	r1, r2
 80023c6:	bf02      	ittt	eq
 80023c8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80023ca:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80023ce:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80023d0:	f241 1211 	movw	r2, #4369	; 0x1111
 80023d4:	6a19      	ldr	r1, [r3, #32]
 80023d6:	4211      	tst	r1, r2
 80023d8:	d108      	bne.n	80023ec <HAL_TIM_PWM_Stop+0x4c>
 80023da:	f240 4244 	movw	r2, #1092	; 0x444
 80023de:	6a19      	ldr	r1, [r3, #32]
 80023e0:	4211      	tst	r1, r2
 80023e2:	bf02      	ittt	eq
 80023e4:	681a      	ldreq	r2, [r3, #0]
 80023e6:	f022 0201 	biceq.w	r2, r2, #1
 80023ea:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00

080023fc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80023fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002400:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002402:	2b01      	cmp	r3, #1
 8002404:	f04f 0302 	mov.w	r3, #2
 8002408:	d018      	beq.n	800243c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800240a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800240e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002410:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002412:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002414:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002416:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800241a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4322      	orrs	r2, r4
 8002420:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002428:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002430:	2301      	movs	r3, #1
 8002432:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002436:	2300      	movs	r3, #0
 8002438:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800243c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800243e:	bd10      	pop	{r4, pc}

08002440 <HAL_TIMEx_CommutationCallback>:
 8002440:	4770      	bx	lr

08002442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002442:	4770      	bx	lr

08002444 <busy_flag_check>:
#include "hd44780.h"

uint8_t busy_flag_check()
{
 8002444:	b530      	push	{r4, r5, lr}
	uint8_t out = BUSY;

	//must to set all data lines as input
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCD_4567;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800244a:	2400      	movs	r4, #0
{
 800244c:	b085      	sub	sp, #20
	HAL_GPIO_Init(LCD_DATA_PORT, &GPIO_InitStruct);
 800244e:	4669      	mov	r1, sp
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <busy_flag_check+0x7c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	e88d 0018 	stmia.w	sp, {r3, r4}
	HAL_GPIO_Init(LCD_DATA_PORT, &GPIO_InitStruct);
 8002456:	f7fe fdcf 	bl	8000ff8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CONTROL_PORT,LCD_RW,GPIO_PIN_SET);//read from lcd
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002460:	4818      	ldr	r0, [pc, #96]	; (80024c4 <busy_flag_check+0x80>)
 8002462:	f7fe feaf 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PORT,LCD_RS,GPIO_PIN_RESET);
 8002466:	4622      	mov	r2, r4
 8002468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <busy_flag_check+0x7c>)
 800246e:	f7fe fea9 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CONTROL_PORT,LCD_CLOCK,GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	4812      	ldr	r0, [pc, #72]	; (80024c4 <busy_flag_check+0x80>)
 800247a:	f7fe fea3 	bl	80011c4 <HAL_GPIO_WritePin>
 800247e:	240a      	movs	r4, #10

	for(int i = NO_BUSY_CHECK; i >  0; i-- )
	{
		if(HAL_GPIO_ReadPin(LCD_DATA_PORT,LCD_7) == NOT_BUSY)
 8002480:	4d0f      	ldr	r5, [pc, #60]	; (80024c0 <busy_flag_check+0x7c>)
 8002482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002486:	4628      	mov	r0, r5
 8002488:	f7fe fe96 	bl	80011b8 <HAL_GPIO_ReadPin>
 800248c:	b1b0      	cbz	r0, 80024bc <busy_flag_check+0x78>
	for(int i = NO_BUSY_CHECK; i >  0; i-- )
 800248e:	3c01      	subs	r4, #1
 8002490:	d1f7      	bne.n	8002482 <busy_flag_check+0x3e>
	uint8_t out = BUSY;
 8002492:	2401      	movs	r4, #1

	}

	//set data lines as output
	GPIO_InitStruct.Pin = LCD_4567;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002498:	2301      	movs	r3, #1
 800249a:	e88d 000c 	stmia.w	sp, {r2, r3}
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249e:	2303      	movs	r3, #3
	HAL_GPIO_Init(LCD_DATA_PORT, &GPIO_InitStruct);
 80024a0:	4669      	mov	r1, sp
 80024a2:	4807      	ldr	r0, [pc, #28]	; (80024c0 <busy_flag_check+0x7c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LCD_DATA_PORT, &GPIO_InitStruct);
 80024a6:	f7fe fda7 	bl	8000ff8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CONTROL_PORT,LCD_RW,GPIO_PIN_RESET);//write to lcd
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <busy_flag_check+0x80>)
 80024b2:	f7fe fe87 	bl	80011c4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CONTROL_PORT,LCD_CLOCK,GPIO_PIN_RESET);



	return out;
}
 80024b6:	4620      	mov	r0, r4
 80024b8:	b005      	add	sp, #20
 80024ba:	bd30      	pop	{r4, r5, pc}
			out = NOT_BUSY;
 80024bc:	4604      	mov	r4, r0
 80024be:	e7e9      	b.n	8002494 <busy_flag_check+0x50>
 80024c0:	40010800 	.word	0x40010800
 80024c4:	40010c00 	.word	0x40010c00

080024c8 <lcd_clock>:
uint8_t get_bit(uint8_t command, uint8_t no)
{
	return ((command >> no) & 1);
}
void lcd_clock()
{
 80024c8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_CLOCK,GPIO_PIN_SET);
 80024ca:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <lcd_clock+0x2c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7fe fe76 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe fa6b 	bl	80009b4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CONTROL_PORT, LCD_CLOCK,GPIO_PIN_RESET);
 80024de:	4620      	mov	r0, r4
 80024e0:	2200      	movs	r2, #0
 80024e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e6:	f7fe fe6d 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
}
 80024ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe ba60 	b.w	80009b4 <HAL_Delay>
 80024f4:	40010c00 	.word	0x40010c00

080024f8 <lcd_write_nibble>:
	return ((command >> no) & 1);
 80024f8:	fa40 f301 	asr.w	r3, r0, r1
	if (get_bit(command,start_bit)) bsrr |= LCD_7; //set one
 80024fc:	f013 0f01 	tst.w	r3, #1
	else bsrr |= ((uint32_t)LCD_7 <<16U);  //must to shift to left, because of BSRR from 16 place resets ODR
 8002500:	bf14      	ite	ne
 8002502:	f44f 6300 	movne.w	r3, #2048	; 0x800
 8002506:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
{
 800250a:	b410      	push	{r4}
	if (get_bit(command,start_bit-1)) bsrr |= LCD_6; //set one
 800250c:	1e4c      	subs	r4, r1, #1
	return ((command >> no) & 1);
 800250e:	b2e4      	uxtb	r4, r4
 8002510:	fa40 f404 	asr.w	r4, r0, r4
	if (get_bit(command,start_bit-1)) bsrr |= LCD_6; //set one
 8002514:	07e4      	lsls	r4, r4, #31
	if (get_bit(command,start_bit-2)) bsrr |= LCD_5; //set one
 8002516:	f1a1 0402 	sub.w	r4, r1, #2
	return ((command >> no) & 1);
 800251a:	b2e4      	uxtb	r4, r4
	if (get_bit(command,start_bit-3)) bsrr |= LCD_4; //set one
 800251c:	f1a1 0103 	sub.w	r1, r1, #3
	return ((command >> no) & 1);
 8002520:	fa40 f404 	asr.w	r4, r0, r4
 8002524:	b2c9      	uxtb	r1, r1
	if (get_bit(command,start_bit-1)) bsrr |= LCD_6; //set one
 8002526:	bf4c      	ite	mi
 8002528:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
	else bsrr |= ((uint32_t)LCD_6 <<16U);  //must to shift to left, because of BSRR from 16 place resets ODR
 800252c:	f043 6380 	orrpl.w	r3, r3, #67108864	; 0x4000000
	return ((command >> no) & 1);
 8002530:	fa40 f101 	asr.w	r1, r0, r1
	if (get_bit(command,start_bit-2)) bsrr |= LCD_5; //set one
 8002534:	07e4      	lsls	r4, r4, #31
 8002536:	bf4c      	ite	mi
 8002538:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
	else bsrr |= ((uint32_t)LCD_5 <<16U);  //must to shift to left, because of BSRR from 16 place resets ODR
 800253c:	f043 7300 	orrpl.w	r3, r3, #33554432	; 0x2000000
	if (get_bit(command,start_bit-3)) bsrr |= LCD_4; //set one
 8002540:	07c9      	lsls	r1, r1, #31
	LCD_DATA_PORT -> BSRR =  bsrr;
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <lcd_write_nibble+0x6c>)
	if (get_bit(command,start_bit-3)) bsrr |= LCD_4; //set one
 8002544:	bf4c      	ite	mi
 8002546:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	else bsrr |= ((uint32_t)LCD_4 << 16U);  //must to shift to left, because of BSRR from 16 place resets ODR
 800254a:	f043 7380 	orrpl.w	r3, r3, #16777216	; 0x1000000
	if (rs) bsrr |= LCD_RS; //set one
 800254e:	2a00      	cmp	r2, #0
	LCD_DATA_PORT -> BSRR =  bsrr;
 8002550:	610b      	str	r3, [r1, #16]
	else bsrr |= LCD_RS << 16U;  //must to shift to left, because of BSRR from 16 place resets ODR
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <lcd_write_nibble+0x70>)
 8002554:	bf08      	it	eq
 8002556:	f04f 5340 	moveq.w	r3, #805306368	; 0x30000000
	LCD_CONTROL_PORT -> BSRR = bsrr;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <lcd_write_nibble+0x74>)
}
 800255c:	bc10      	pop	{r4}
	LCD_CONTROL_PORT -> BSRR = bsrr;
 800255e:	6113      	str	r3, [r2, #16]
	lcd_clock();
 8002560:	f7ff bfb2 	b.w	80024c8 <lcd_clock>
 8002564:	40010800 	.word	0x40010800
 8002568:	20001000 	.word	0x20001000
 800256c:	40010c00 	.word	0x40010c00

08002570 <lcd_print_letter>:
{
 8002570:	b510      	push	{r4, lr}
 8002572:	4604      	mov	r4, r0
	if (busy_flag_check() == BUSY) return COMMAND_BUSY_ERROR;
 8002574:	f7ff ff66 	bl	8002444 <busy_flag_check>
 8002578:	2801      	cmp	r0, #1
 800257a:	d00a      	beq.n	8002592 <lcd_print_letter+0x22>
	lcd_write_nibble(letter,MSB, 1);
 800257c:	2201      	movs	r2, #1
 800257e:	2107      	movs	r1, #7
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff ffb9 	bl	80024f8 <lcd_write_nibble>
	lcd_write_nibble(letter,LSB, 1);
 8002586:	4620      	mov	r0, r4
 8002588:	2201      	movs	r2, #1
 800258a:	2103      	movs	r1, #3
 800258c:	f7ff ffb4 	bl	80024f8 <lcd_write_nibble>
 8002590:	2000      	movs	r0, #0
}
 8002592:	bd10      	pop	{r4, pc}

08002594 <lcd_print>:
{
 8002594:	b510      	push	{r4, lr}
 8002596:	1e44      	subs	r4, r0, #1
	for(int i = 0; word[i] != 0; i++)
 8002598:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800259c:	b118      	cbz	r0, 80025a6 <lcd_print+0x12>
		if(lcd_print_letter(word[i]) == COMMAND_BUSY_ERROR)return COMMAND_BUSY_ERROR;
 800259e:	f7ff ffe7 	bl	8002570 <lcd_print_letter>
 80025a2:	2801      	cmp	r0, #1
 80025a4:	d1f8      	bne.n	8002598 <lcd_print+0x4>
}
 80025a6:	bd10      	pop	{r4, pc}

080025a8 <lcd_print_int>:
{
 80025a8:	b507      	push	{r0, r1, r2, lr}
	sprintf(word,"%d",number);
 80025aa:	4602      	mov	r2, r0
 80025ac:	4904      	ldr	r1, [pc, #16]	; (80025c0 <lcd_print_int+0x18>)
 80025ae:	a801      	add	r0, sp, #4
 80025b0:	f000 fd5c 	bl	800306c <siprintf>
	return lcd_print(word);
 80025b4:	a801      	add	r0, sp, #4
 80025b6:	f7ff ffed 	bl	8002594 <lcd_print>
}
 80025ba:	b003      	add	sp, #12
 80025bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c0:	08003918 	.word	0x08003918

080025c4 <lcd_write>:
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	4604      	mov	r4, r0
	if (busy_flag_check() == BUSY) return COMMAND_BUSY_ERROR;
 80025c8:	f7ff ff3c 	bl	8002444 <busy_flag_check>
 80025cc:	2801      	cmp	r0, #1
 80025ce:	d00a      	beq.n	80025e6 <lcd_write+0x22>
	lcd_write_nibble(command,MSB, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2107      	movs	r1, #7
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff ff8f 	bl	80024f8 <lcd_write_nibble>
	lcd_write_nibble(command,LSB, 0);
 80025da:	4620      	mov	r0, r4
 80025dc:	2200      	movs	r2, #0
 80025de:	2103      	movs	r1, #3
 80025e0:	f7ff ff8a 	bl	80024f8 <lcd_write_nibble>
 80025e4:	2000      	movs	r0, #0
}
 80025e6:	bd10      	pop	{r4, pc}

080025e8 <lcd_init>:
{
 80025e8:	b508      	push	{r3, lr}
	if (busy_flag_check() != BUSY)
 80025ea:	f7ff ff2b 	bl	8002444 <busy_flag_check>
 80025ee:	2801      	cmp	r0, #1
 80025f0:	d013      	beq.n	800261a <lcd_init+0x32>
	LCD_DATA_PORT -> BSRR =  bsrr;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <lcd_init+0x34>)
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <lcd_init+0x38>)
 80025f6:	611a      	str	r2, [r3, #16]
	LCD_CONTROL_PORT -> BSRR = bsrr;
 80025f8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80025fc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	lcd_clock();
 8002600:	f7ff ff62 	bl	80024c8 <lcd_clock>
		lcd_write(TWO_LINES_4BIT);
 8002604:	2028      	movs	r0, #40	; 0x28
 8002606:	f7ff ffdd 	bl	80025c4 <lcd_write>
		lcd_write(DISPLAY_ON_OFF);
 800260a:	200e      	movs	r0, #14
 800260c:	f7ff ffda 	bl	80025c4 <lcd_write>
}
 8002610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_write(ENTRY_MODE_INCREMENT | DISPLAY_SHIFT_OFF);
 8002614:	2006      	movs	r0, #6
 8002616:	f7ff bfd5 	b.w	80025c4 <lcd_write>
 800261a:	bd08      	pop	{r3, pc}
 800261c:	40010800 	.word	0x40010800
 8002620:	0d000200 	.word	0x0d000200

08002624 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002624:	2228      	movs	r2, #40	; 0x28
{
 8002626:	b530      	push	{r4, r5, lr}
 8002628:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262a:	eb0d 0002 	add.w	r0, sp, r2
 800262e:	2100      	movs	r1, #0
 8002630:	f000 fd14 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	2214      	movs	r2, #20
 8002636:	2100      	movs	r1, #0
 8002638:	eb0d 0002 	add.w	r0, sp, r2
 800263c:	f000 fd0e 	bl	800305c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	2210      	movs	r2, #16
 8002642:	2100      	movs	r1, #0
 8002644:	a801      	add	r0, sp, #4
 8002646:	f000 fd09 	bl	800305c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800264a:	2305      	movs	r3, #5
 800264c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800264e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002652:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002654:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002656:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002658:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800265a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002660:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002662:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002668:	f7fe fdc4 	bl	80011f4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800266c:	230f      	movs	r3, #15
 800266e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800267a:	f44f 63a0 	mov.w	r3, #1280	; 0x500

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800267e:	4621      	mov	r1, r4
 8002680:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002682:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002684:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002686:	f7fe ff7d 	bl	8001584 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800268a:	2303      	movs	r3, #3
 800268c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800269a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	f7ff f834 	bl	8001708 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80026a0:	b015      	add	sp, #84	; 0x54
 80026a2:	bd30      	pop	{r4, r5, pc}

080026a4 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b508      	push	{r3, lr}
	//pass two values, because we don't know which one comes
	battery_adc = HAL_ADC_GetValue(&hadc1);
 80026a6:	4808      	ldr	r0, [pc, #32]	; (80026c8 <HAL_ADC_ConvCpltCallback+0x24>)
 80026a8:	f7fe f996 	bl	80009d8 <HAL_ADC_GetValue>
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_ADC_ConvCpltCallback+0x28>)
 80026ae:	b280      	uxth	r0, r0
 80026b0:	8018      	strh	r0, [r3, #0]
	shount_adc = HAL_ADC_GetValue(&hadc2);
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80026b4:	f7fe f990 	bl	80009d8 <HAL_ADC_GetValue>
	actualize_adc = TRUE;
 80026b8:	2201      	movs	r2, #1
	shount_adc = HAL_ADC_GetValue(&hadc2);
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_ADC_ConvCpltCallback+0x30>)
 80026bc:	b280      	uxth	r0, r0
 80026be:	8018      	strh	r0, [r3, #0]
	actualize_adc = TRUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_ADC_ConvCpltCallback+0x34>)
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	bd08      	pop	{r3, pc}
 80026c6:	bf00      	nop
 80026c8:	20000138 	.word	0x20000138
 80026cc:	20000096 	.word	0x20000096
 80026d0:	200000c8 	.word	0x200000c8
 80026d4:	200000b2 	.word	0x200000b2
 80026d8:	20000094 	.word	0x20000094

080026dc <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 	if(GPIO_Pin == SW1_Pin)
 80026dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026e0:	d103      	bne.n	80026ea <HAL_GPIO_EXTI_Callback+0xe>
 		SW_number = SW1;
 80026e2:	2200      	movs	r2, #0
 	if(GPIO_Pin == SW2_Pin)
 		SW_number = SW2;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_GPIO_EXTI_Callback+0x18>)
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	4770      	bx	lr
 	if(GPIO_Pin == SW2_Pin)
 80026ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80026ee:	d1fb      	bne.n	80026e8 <HAL_GPIO_EXTI_Callback+0xc>
 		SW_number = SW2;
 80026f0:	2201      	movs	r2, #1
 80026f2:	e7f7      	b.n	80026e4 <HAL_GPIO_EXTI_Callback+0x8>
 80026f4:	20000008 	.word	0x20000008

080026f8 <adjustShountCurrent>:
}

void adjustShountCurrent(uint16_t current_to_set)//current in mA
{
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	b088      	sub	sp, #32
	uint8_t shouldSetNew = TRUE;
	TIM_OC_InitTypeDef sConfigOC = {0};
 80026fe:	221c      	movs	r2, #28
 8002700:	2100      	movs	r1, #0
 8002702:	a801      	add	r0, sp, #4
 8002704:	f000 fcaa 	bl	800305c <memset>

	if (current_to_set == 0)
 8002708:	b9d4      	cbnz	r4, 8002740 <adjustShountCurrent+0x48>
	{
		pwm_pulse = pwm_period;
 800270a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <adjustShountCurrent+0x70>)
 8002710:	801a      	strh	r2, [r3, #0]
	else
		shouldSetNew = FALSE;

	if (shouldSetNew == TRUE)
	{
		HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8002712:	2100      	movs	r1, #0
 8002714:	4815      	ldr	r0, [pc, #84]	; (800276c <adjustShountCurrent+0x74>)
 8002716:	f7ff fe43 	bl	80023a0 <HAL_TIM_PWM_Stop>
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271a:	2360      	movs	r3, #96	; 0x60
		sConfigOC.Pulse = pwm_pulse;
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271c:	2400      	movs	r4, #0
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271e:	9301      	str	r3, [sp, #4]
		sConfigOC.Pulse = pwm_pulse;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <adjustShountCurrent+0x70>)
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002722:	a901      	add	r1, sp, #4
		sConfigOC.Pulse = pwm_pulse;
 8002724:	881b      	ldrh	r3, [r3, #0]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002726:	4622      	mov	r2, r4
 8002728:	4810      	ldr	r0, [pc, #64]	; (800276c <adjustShountCurrent+0x74>)
		sConfigOC.Pulse = pwm_pulse;
 800272a:	9302      	str	r3, [sp, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	9403      	str	r4, [sp, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272e:	9405      	str	r4, [sp, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002730:	f7ff fdb2 	bl	8002298 <HAL_TIM_PWM_ConfigChannel>
		{
			Error_Handler();
		}
		HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8002734:	4621      	mov	r1, r4
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <adjustShountCurrent+0x74>)
 8002738:	f7ff fe1c 	bl	8002374 <HAL_TIM_PWM_Start>
	}

}
 800273c:	b008      	add	sp, #32
 800273e:	bd10      	pop	{r4, pc}
	else if (shount_current > current_to_set)//shount_current greater, so increase pwm because mosfet is N type
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <adjustShountCurrent+0x78>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	429c      	cmp	r4, r3
 8002746:	d207      	bcs.n	8002758 <adjustShountCurrent+0x60>
		if (pwm_pulse != pwm_period)
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <adjustShountCurrent+0x70>)
 800274a:	8813      	ldrh	r3, [r2, #0]
 800274c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002750:	d0df      	beq.n	8002712 <adjustShountCurrent+0x1a>
			pwm_pulse++;
 8002752:	3301      	adds	r3, #1
			pwm_pulse--;
 8002754:	8013      	strh	r3, [r2, #0]
 8002756:	e7dc      	b.n	8002712 <adjustShountCurrent+0x1a>
	else if(shount_current < current_to_set)
 8002758:	d9f0      	bls.n	800273c <adjustShountCurrent+0x44>
		if (pwm_pulse != 0)
 800275a:	4a03      	ldr	r2, [pc, #12]	; (8002768 <adjustShountCurrent+0x70>)
 800275c:	8813      	ldrh	r3, [r2, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0d7      	beq.n	8002712 <adjustShountCurrent+0x1a>
			pwm_pulse--;
 8002762:	3b01      	subs	r3, #1
 8002764:	e7f6      	b.n	8002754 <adjustShountCurrent+0x5c>
 8002766:	bf00      	nop
 8002768:	200000b0 	.word	0x200000b0
 800276c:	2000017c 	.word	0x2000017c
 8002770:	200000b4 	.word	0x200000b4
 8002774:	00000000 	.word	0x00000000

08002778 <main>:
{
 8002778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	2610      	movs	r6, #16
{
 800277e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002780:	f7fe f8f4 	bl	800096c <HAL_Init>
  SystemClock_Config();
 8002784:	f7ff ff4e 	bl	8002624 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	4632      	mov	r2, r6
 800278a:	2100      	movs	r1, #0
 800278c:	a80f      	add	r0, sp, #60	; 0x3c
 800278e:	f000 fc65 	bl	800305c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4bc1      	ldr	r3, [pc, #772]	; (8002a98 <main+0x320>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002794:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002798:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800279a:	48c0      	ldr	r0, [pc, #768]	; (8002a9c <main+0x324>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279c:	4332      	orrs	r2, r6
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a4:	4032      	ands	r2, r6
 80027a6:	9205      	str	r2, [sp, #20]
 80027a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027aa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b0:	f042 0220 	orr.w	r2, r2, #32
 80027b4:	619a      	str	r2, [r3, #24]
 80027b6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027bc:	f002 0220 	and.w	r2, r2, #32
 80027c0:	9206      	str	r2, [sp, #24]
 80027c2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80027c6:	f44f 7b40 	mov.w	fp, #768	; 0x300
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	f042 0204 	orr.w	r2, r2, #4
 80027ce:	619a      	str	r2, [r3, #24]
 80027d0:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Period = 480;
 80027d2:	f44f 78f0 	mov.w	r8, #480	; 0x1e0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	f002 0204 	and.w	r2, r2, #4
 80027da:	9207      	str	r2, [sp, #28]
 80027dc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	699a      	ldr	r2, [r3, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	f042 0208 	orr.w	r2, r2, #8
 80027e8:	619a      	str	r2, [r3, #24]
 80027ea:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	9308      	str	r3, [sp, #32]
 80027f4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80027f6:	f7fe fce5 	bl	80011c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002800:	48a7      	ldr	r0, [pc, #668]	; (8002aa0 <main+0x328>)
 8002802:	f7fe fcdf 	bl	80011c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002806:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	a90f      	add	r1, sp, #60	; 0x3c
 800280c:	48a3      	ldr	r0, [pc, #652]	; (8002a9c <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800280e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	f7fe fbed 	bl	8000ff8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800281e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	a90f      	add	r1, sp, #60	; 0x3c
 8002824:	489e      	ldr	r0, [pc, #632]	; (8002aa0 <main+0x328>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002826:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f7fe fbe1 	bl	8000ff8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002836:	4b9b      	ldr	r3, [pc, #620]	; (8002aa4 <main+0x32c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	a90f      	add	r1, sp, #60	; 0x3c
 800283a:	4898      	ldr	r0, [pc, #608]	; (8002a9c <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800283c:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800283e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f7fe fbd8 	bl	8000ff8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002848:	4622      	mov	r2, r4
 800284a:	4621      	mov	r1, r4
 800284c:	2017      	movs	r0, #23
 800284e:	f7fe fb7d 	bl	8000f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002852:	2017      	movs	r0, #23
 8002854:	f7fe fbae 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002858:	4632      	mov	r2, r6
 800285a:	4621      	mov	r1, r4
 800285c:	a80b      	add	r0, sp, #44	; 0x2c
 800285e:	f000 fbfd 	bl	800305c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002862:	221c      	movs	r2, #28
 8002864:	4621      	mov	r1, r4
 8002866:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002868:	9409      	str	r4, [sp, #36]	; 0x24
 800286a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800286c:	f000 fbf6 	bl	800305c <memset>
  htim2.Instance = TIM2;
 8002870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002874:	4d8c      	ldr	r5, [pc, #560]	; (8002aa8 <main+0x330>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002876:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002878:	e885 0058 	stmia.w	r5, {r3, r4, r6}
  htim2.Init.Period = 480;
 800287c:	f8c5 800c 	str.w	r8, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002880:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002882:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002884:	f7ff fca8 	bl	80021d8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002888:	a90b      	add	r1, sp, #44	; 0x2c
 800288a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288c:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800288e:	f7ff fb0b 	bl	8001ea8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002892:	4628      	mov	r0, r5
 8002894:	f7ff fcba 	bl	800220c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002898:	a909      	add	r1, sp, #36	; 0x24
 800289a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289c:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a0:	f7ff fdac 	bl	80023fc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a6:	4622      	mov	r2, r4
 80028a8:	a90f      	add	r1, sp, #60	; 0x3c
 80028aa:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ac:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 480;
 80028ae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b4:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b6:	f7ff fcef 	bl	8002298 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80028ba:	4628      	mov	r0, r5
 80028bc:	f000 fae2 	bl	8002e84 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c0:	4632      	mov	r2, r6
 80028c2:	4621      	mov	r1, r4
 80028c4:	a80f      	add	r0, sp, #60	; 0x3c
 80028c6:	f000 fbc9 	bl	800305c <memset>
  htim3.Instance = TIM3;
 80028ca:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8002ae4 <main+0x36c>
 80028ce:	4b77      	ldr	r3, [pc, #476]	; (8002aac <main+0x334>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028d0:	4640      	mov	r0, r8
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80028d2:	e888 0058 	stmia.w	r8, {r3, r4, r6}
  htim3.Init.Period = 48000-1;
 80028d6:	f64b 337f 	movw	r3, #47999	; 0xbb7f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028da:	940b      	str	r4, [sp, #44]	; 0x2c
  htim3.Init.Period = 48000-1;
 80028dc:	f8c8 300c 	str.w	r3, [r8, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e0:	940c      	str	r4, [sp, #48]	; 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	f8c8 4010 	str.w	r4, [r8, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028ea:	f7ff fc75 	bl	80021d8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028ee:	a90f      	add	r1, sp, #60	; 0x3c
 80028f0:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f2:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028f4:	f7ff fad8 	bl	8001ea8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f8:	a90b      	add	r1, sp, #44	; 0x2c
 80028fa:	4640      	mov	r0, r8
  hadc1.Instance = ADC1;
 80028fc:	4f6c      	ldr	r7, [pc, #432]	; (8002ab0 <main+0x338>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002900:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002902:	f7ff fd7b 	bl	80023fc <HAL_TIMEx_MasterConfigSynchronization>
  hadc1.Instance = ADC1;
 8002906:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <main+0x33c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002908:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 800290a:	603b      	str	r3, [r7, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800290c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 8002910:	4e69      	ldr	r6, [pc, #420]	; (8002ab8 <main+0x340>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	9301      	str	r3, [sp, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002916:	f8c7 9010 	str.w	r9, [r7, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800291a:	940f      	str	r4, [sp, #60]	; 0x3c
 800291c:	9410      	str	r4, [sp, #64]	; 0x40
 800291e:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002920:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002922:	60fc      	str	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002924:	617c      	str	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002926:	607c      	str	r4, [r7, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002928:	f7fe fa14 	bl	8000d54 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800292c:	a90f      	add	r1, sp, #60	; 0x3c
 800292e:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002930:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_0;
 8002934:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002938:	f7fe f8c8 	bl	8000acc <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 800293c:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <main+0x344>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800293e:	9b01      	ldr	r3, [sp, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002940:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8002942:	6032      	str	r2, [r6, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002944:	61f3      	str	r3, [r6, #28]
  hadc2.Init.NbrOfConversion = 1;
 8002946:	f8c6 9010 	str.w	r9, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	940f      	str	r4, [sp, #60]	; 0x3c
 800294c:	9410      	str	r4, [sp, #64]	; 0x40
 800294e:	9411      	str	r4, [sp, #68]	; 0x44
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002950:	60b4      	str	r4, [r6, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002952:	60f4      	str	r4, [r6, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002954:	6174      	str	r4, [r6, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002956:	6074      	str	r4, [r6, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002958:	f7fe f9fc 	bl	8000d54 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800295c:	a90f      	add	r1, sp, #60	; 0x3c
 800295e:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 8002960:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002964:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002968:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800296a:	f7fe f8af 	bl	8000acc <HAL_ADC_ConfigChannel>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8002972:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002ae8 <main+0x370>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002976:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <main+0x348>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002978:	4648      	mov	r0, r9
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800297a:	e889 000c 	stmia.w	r9, {r2, r3}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_SECOND;
 800297e:	f8c9 b008 	str.w	fp, [r9, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002982:	f7ff f98d 	bl	8001ca0 <HAL_RTC_Init>
   HAL_RTCEx_SetSecond_IT(&hrtc);
 8002986:	4648      	mov	r0, r9
 8002988:	f7ff f9da 	bl	8001d40 <HAL_RTCEx_SetSecond_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800298c:	4640      	mov	r0, r8
 800298e:	f7ff fa7f 	bl	8001e90 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002992:	4638      	mov	r0, r7
 8002994:	f7fe fa5e 	bl	8000e54 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8002998:	4630      	mov	r0, r6
 800299a:	f7fe fa5b 	bl	8000e54 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800299e:	4621      	mov	r1, r4
 80029a0:	4628      	mov	r0, r5
 80029a2:	f7ff fce7 	bl	8002374 <HAL_TIM_PWM_Start>
  lcd_init();
 80029a6:	f7ff fe1f 	bl	80025e8 <lcd_init>
  lcd_write(DISPLAY_HOME);
 80029aa:	4650      	mov	r0, sl
 80029ac:	f7ff fe0a 	bl	80025c4 <lcd_write>
  HAL_RTC_Init(&hrtc);
 80029b0:	4648      	mov	r0, r9
 80029b2:	f7ff f975 	bl	8001ca0 <HAL_RTC_Init>
  uint16_t SW_counter[2] = {0,0};
 80029b6:	4625      	mov	r5, r4
  zeroTimer();
 80029b8:	f000 f904 	bl	8002bc4 <zeroTimer>
	  if (actualize_lcd==TRUE)
 80029bc:	4e41      	ldr	r6, [pc, #260]	; (8002ac4 <main+0x34c>)
 80029be:	7833      	ldrb	r3, [r6, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d103      	bne.n	80029cc <main+0x254>
		  actualize_lcd = FALSE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	7033      	strb	r3, [r6, #0]
		  actualizeLCD();
 80029c8:	f000 f92c 	bl	8002c24 <actualizeLCD>
	  if (actualize_adc==TRUE)
 80029cc:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8002aec <main+0x374>
 80029d0:	f89b 3000 	ldrb.w	r3, [fp]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 80ae 	bne.w	8002b36 <main+0x3be>
		  battery_voltage = 2 *  battery_adc/4096.0 * 3300;
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <main+0x350>)
		  last_time += TIM3->CNT;
 80029dc:	4f3b      	ldr	r7, [pc, #236]	; (8002acc <main+0x354>)
		  battery_voltage = 2 *  battery_adc/4096.0 * 3300;
 80029de:	8818      	ldrh	r0, [r3, #0]
 80029e0:	b280      	uxth	r0, r0
 80029e2:	0040      	lsls	r0, r0, #1
 80029e4:	f7fd fd06 	bl	80003f4 <__aeabi_i2d>
 80029e8:	2200      	movs	r2, #0
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <main+0x358>)
 80029ec:	f7fd fd68 	bl	80004c0 <__aeabi_dmul>
 80029f0:	a325      	add	r3, pc, #148	; (adr r3, 8002a88 <main+0x310>)
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f7fd fd63 	bl	80004c0 <__aeabi_dmul>
 80029fa:	f7fd ff73 	bl	80008e4 <__aeabi_d2uiz>
 80029fe:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <main+0x35c>)
 8002a00:	fa1f f880 	uxth.w	r8, r0
 8002a04:	f8a3 8000 	strh.w	r8, [r3]
		  shount_current = 2 * shount_adc/4096.0 * 3300;
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <main+0x360>)
 8002a0a:	8818      	ldrh	r0, [r3, #0]
 8002a0c:	b280      	uxth	r0, r0
 8002a0e:	0040      	lsls	r0, r0, #1
 8002a10:	f7fd fcf0 	bl	80003f4 <__aeabi_i2d>
 8002a14:	2200      	movs	r2, #0
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <main+0x358>)
 8002a18:	f7fd fd52 	bl	80004c0 <__aeabi_dmul>
 8002a1c:	a31a      	add	r3, pc, #104	; (adr r3, 8002a88 <main+0x310>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fd4d 	bl	80004c0 <__aeabi_dmul>
 8002a26:	f7fd ff5d 	bl	80008e4 <__aeabi_d2uiz>
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <main+0x364>)
 8002a2c:	fa1f fa80 	uxth.w	sl, r0
 8002a30:	f8a3 a000 	strh.w	sl, [r3]
		  last_time += TIM3->CNT;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <main+0x334>)
		  double measured_energy_delta = (battery_voltage/CELL_18650_VOLTAGE)*shount_current*(delta_time/1000.0);
 8002a36:	4640      	mov	r0, r8
		  last_time += TIM3->CNT;
 8002a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	603b      	str	r3, [r7, #0]
		  double delta_time = last_time/interrupt_time_counter_TIM3;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9301      	str	r3, [sp, #4]
		  measured_energy += measured_energy_delta/3600;
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <main+0x368>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
		  double measured_energy_delta = (battery_voltage/CELL_18650_VOLTAGE)*shount_current*(delta_time/1000.0);
 8002a4e:	f7fd fcd1 	bl	80003f4 <__aeabi_i2d>
 8002a52:	a30f      	add	r3, pc, #60	; (adr r3, 8002a90 <main+0x318>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fe5c 	bl	8000714 <__aeabi_ddiv>
 8002a5c:	4680      	mov	r8, r0
 8002a5e:	4650      	mov	r0, sl
 8002a60:	4689      	mov	r9, r1
 8002a62:	f7fd fcc7 	bl	80003f4 <__aeabi_i2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	f7fd fd27 	bl	80004c0 <__aeabi_dmul>
 8002a72:	4680      	mov	r8, r0
		  double delta_time = last_time/interrupt_time_counter_TIM3;
 8002a74:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8002a78:	9b01      	ldr	r3, [sp, #4]
		  double measured_energy_delta = (battery_voltage/CELL_18650_VOLTAGE)*shount_current*(delta_time/1000.0);
 8002a7a:	4689      	mov	r9, r1
		  double delta_time = last_time/interrupt_time_counter_TIM3;
 8002a7c:	fb93 f0f0 	sdiv	r0, r3, r0
 8002a80:	f7fd fcb8 	bl	80003f4 <__aeabi_i2d>
		  double measured_energy_delta = (battery_voltage/CELL_18650_VOLTAGE)*shount_current*(delta_time/1000.0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	e033      	b.n	8002af0 <main+0x378>
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40a9c800 	.word	0x40a9c800
 8002a90:	00000000 	.word	0x00000000
 8002a94:	40ace800 	.word	0x40ace800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	10210000 	.word	0x10210000
 8002aa8:	2000017c 	.word	0x2000017c
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	20000138 	.word	0x20000138
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	200000c8 	.word	0x200000c8
 8002abc:	40012800 	.word	0x40012800
 8002ac0:	40002800 	.word	0x40002800
 8002ac4:	20000095 	.word	0x20000095
 8002ac8:	20000096 	.word	0x20000096
 8002acc:	2000009c 	.word	0x2000009c
 8002ad0:	3f300000 	.word	0x3f300000
 8002ad4:	20000098 	.word	0x20000098
 8002ad8:	200000b2 	.word	0x200000b2
 8002adc:	200000b4 	.word	0x200000b4
 8002ae0:	200000a8 	.word	0x200000a8
 8002ae4:	200000f8 	.word	0x200000f8
 8002ae8:	20000168 	.word	0x20000168
 8002aec:	20000094 	.word	0x20000094
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <main+0x438>)
 8002af2:	f7fd fe0f 	bl	8000714 <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4640      	mov	r0, r8
 8002afc:	4649      	mov	r1, r9
 8002afe:	f7fd fcdf 	bl	80004c0 <__aeabi_dmul>
		  measured_energy += measured_energy_delta/3600;
 8002b02:	a329      	add	r3, pc, #164	; (adr r3, 8002ba8 <main+0x430>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fe04 	bl	8000714 <__aeabi_ddiv>
 8002b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b10:	f7fd fb24 	bl	800015c <__adddf3>
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <main+0x43c>)
 8002b16:	e9c3 0100 	strd	r0, r1, [r3]
		  adjustShountCurrent(discharging_current);
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <main+0x440>)
 8002b1c:	8818      	ldrh	r0, [r3, #0]
 8002b1e:	f7ff fdeb 	bl	80026f8 <adjustShountCurrent>
		  last_time = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
		  actualize_adc= FALSE;
 8002b26:	f88b 3000 	strb.w	r3, [fp]
		  if(SW_counter[SW1] > 0) SW_counter[SW1]--;
 8002b2a:	b10d      	cbz	r5, 8002b30 <main+0x3b8>
 8002b2c:	3d01      	subs	r5, #1
 8002b2e:	b2ad      	uxth	r5, r5
		  if(SW_counter[SW2] > 0) SW_counter[SW2]--;
 8002b30:	b10c      	cbz	r4, 8002b36 <main+0x3be>
 8002b32:	3c01      	subs	r4, #1
 8002b34:	b2a4      	uxth	r4, r4
	  if (SW_number == SW1 && SW_counter[SW1] == 0 )//start - pause
 8002b36:	4f21      	ldr	r7, [pc, #132]	; (8002bbc <main+0x444>)
 8002b38:	783b      	ldrb	r3, [r7, #0]
 8002b3a:	b98b      	cbnz	r3, 8002b60 <main+0x3e8>
 8002b3c:	b985      	cbnz	r5, 8002b60 <main+0x3e8>
		  SW_number = NO_SW;
 8002b3e:	2302      	movs	r3, #2
		  actualize_lcd = TRUE;
 8002b40:	2201      	movs	r2, #1
		  SW_number = NO_SW;
 8002b42:	703b      	strb	r3, [r7, #0]
		  if (measure_start == TRUE)
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <main+0x448>)
		  actualize_lcd = TRUE;
 8002b46:	7032      	strb	r2, [r6, #0]
		  if (measure_start == TRUE)
 8002b48:	7819      	ldrb	r1, [r3, #0]
 8002b4a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002bb8 <main+0x440>
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	d120      	bne.n	8002b94 <main+0x41c>
			  measure_start = FALSE;
 8002b52:	701d      	strb	r5, [r3, #0]
			  pauseTimer();
 8002b54:	f000 f842 	bl	8002bdc <pauseTimer>
			  discharging_current = 0;
 8002b58:	f8a8 5000 	strh.w	r5, [r8]
		  SW_counter[SW1] = SWITCH_DEBOUNCE;
 8002b5c:	f44f 75c8 	mov.w	r5, #400	; 0x190
	  if (SW_number == SW2 && SW_counter[SW2] == 0 )//reset
 8002b60:	783b      	ldrb	r3, [r7, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f47f af2a 	bne.w	80029bc <main+0x244>
 8002b68:	2c00      	cmp	r4, #0
 8002b6a:	f47f af27 	bne.w	80029bc <main+0x244>
		  SW_number = NO_SW;
 8002b6e:	2202      	movs	r2, #2
		  actualize_lcd = TRUE;
 8002b70:	7033      	strb	r3, [r6, #0]
		  measure_start = FALSE;
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <main+0x448>)
		  SW_number = NO_SW;
 8002b74:	703a      	strb	r2, [r7, #0]
		  measure_start = FALSE;
 8002b76:	701c      	strb	r4, [r3, #0]
		  zeroTimer();
 8002b78:	f000 f824 	bl	8002bc4 <zeroTimer>
		  pauseTimer();
 8002b7c:	f000 f82e 	bl	8002bdc <pauseTimer>
		  measured_energy = 0;
 8002b80:	2000      	movs	r0, #0
 8002b82:	2100      	movs	r1, #0
		  discharging_current = 0;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <main+0x440>)
 8002b86:	801c      	strh	r4, [r3, #0]
		  measured_energy = 0;
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <main+0x43c>)
		  SW_counter[SW2] = SWITCH_DEBOUNCE;
 8002b8a:	f44f 74c8 	mov.w	r4, #400	; 0x190
		  measured_energy = 0;
 8002b8e:	e9c3 0100 	strd	r0, r1, [r3]
 8002b92:	e713      	b.n	80029bc <main+0x244>
			  discharging_current = CELL_18650_TYPICAL_CURRENT;
 8002b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			  measure_start = TRUE;
 8002b98:	701a      	strb	r2, [r3, #0]
			  discharging_current = CELL_18650_TYPICAL_CURRENT;
 8002b9a:	f8a8 1000 	strh.w	r1, [r8]
		  	  runTimer();
 8002b9e:	f000 f82f 	bl	8002c00 <runTimer>
 8002ba2:	e7db      	b.n	8002b5c <main+0x3e4>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40ac2000 	.word	0x40ac2000
 8002bb0:	408f4000 	.word	0x408f4000
 8002bb4:	200000a8 	.word	0x200000a8
 8002bb8:	2000009a 	.word	0x2000009a
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	200000a0 	.word	0x200000a0

08002bc4 <zeroTimer>:
//	}
//}

void zeroTimer(void)
{
	sTime.Hours = 0;
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4903      	ldr	r1, [pc, #12]	; (8002bd4 <zeroTimer+0x10>)
	sTime.Minutes = 0;
	sTime.Seconds = 0;
	HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <zeroTimer+0x14>)
	sTime.Hours = 0;
 8002bca:	700a      	strb	r2, [r1, #0]
	sTime.Minutes = 0;
 8002bcc:	704a      	strb	r2, [r1, #1]
	sTime.Seconds = 0;
 8002bce:	708a      	strb	r2, [r1, #2]
	HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8002bd0:	f7fe bf42 	b.w	8001a58 <HAL_RTC_SetTime>
 8002bd4:	200001bc 	.word	0x200001bc
 8002bd8:	20000168 	.word	0x20000168

08002bdc <pauseTimer>:
}
void pauseTimer(void)
{
	if(timerPause == FALSE)
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <pauseTimer+0x18>)
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	b93a      	cbnz	r2, 8002bf2 <pauseTimer+0x16>
	{
		timerPause = TRUE;
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
		sTime_pause = sTime;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <pauseTimer+0x1c>)
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <pauseTimer+0x20>)
 8002bea:	8811      	ldrh	r1, [r2, #0]
 8002bec:	7892      	ldrb	r2, [r2, #2]
 8002bee:	8019      	strh	r1, [r3, #0]
 8002bf0:	709a      	strb	r2, [r3, #2]
 8002bf2:	4770      	bx	lr
 8002bf4:	20000009 	.word	0x20000009
 8002bf8:	200001bc 	.word	0x200001bc
 8002bfc:	200001bf 	.word	0x200001bf

08002c00 <runTimer>:
	}
}
void runTimer()
{
	if(timerPause == TRUE)
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <runTimer+0x18>)
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	2a01      	cmp	r2, #1
 8002c06:	d105      	bne.n	8002c14 <runTimer+0x14>
	{
		timerPause = FALSE;
 8002c08:	2200      	movs	r2, #0
		HAL_RTC_SetTime(&hrtc,&sTime_pause,RTC_FORMAT_BIN);
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <runTimer+0x1c>)
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <runTimer+0x20>)
		timerPause = FALSE;
 8002c0e:	701a      	strb	r2, [r3, #0]
		HAL_RTC_SetTime(&hrtc,&sTime_pause,RTC_FORMAT_BIN);
 8002c10:	f7fe bf22 	b.w	8001a58 <HAL_RTC_SetTime>
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000009 	.word	0x20000009
 8002c1c:	200001bf 	.word	0x200001bf
 8002c20:	20000168 	.word	0x20000168

08002c24 <actualizeLCD>:
	}
}


void actualizeLCD(void)
{
 8002c24:	b538      	push	{r3, r4, r5, lr}
	//first line
	lcd_write(DISPLAY_CLEAR);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7ff fccc 	bl	80025c4 <lcd_write>
	lcd_print_int(battery_voltage);
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <actualizeLCD+0xac>)
 8002c2e:	4c29      	ldr	r4, [pc, #164]	; (8002cd4 <actualizeLCD+0xb0>)
 8002c30:	8818      	ldrh	r0, [r3, #0]
 8002c32:	f7ff fcb9 	bl	80025a8 <lcd_print_int>
	lcd_print("mV  ");
 8002c36:	4828      	ldr	r0, [pc, #160]	; (8002cd8 <actualizeLCD+0xb4>)
 8002c38:	f7ff fcac 	bl	8002594 <lcd_print>
	lcd_print_int(shount_current);
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <actualizeLCD+0xb8>)
 8002c3e:	8818      	ldrh	r0, [r3, #0]
 8002c40:	f7ff fcb2 	bl	80025a8 <lcd_print_int>
	lcd_print("mA");
 8002c44:	4826      	ldr	r0, [pc, #152]	; (8002ce0 <actualizeLCD+0xbc>)
 8002c46:	f7ff fca5 	bl	8002594 <lcd_print>




	//------second line
	lcd_write(SET_SECOND_LINE);
 8002c4a:	20c0      	movs	r0, #192	; 0xc0
 8002c4c:	f7ff fcba 	bl	80025c4 <lcd_write>

	if(timerPause == TRUE)
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <actualizeLCD+0xc0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d135      	bne.n	8002cc4 <actualizeLCD+0xa0>
			sTime = sTime_pause;
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <actualizeLCD+0xc4>)
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	8022      	strh	r2, [r4, #0]
 8002c60:	70a3      	strb	r3, [r4, #2]
	else
		HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
	uint8_t number = sTime.Hours;
 8002c62:	7825      	ldrb	r5, [r4, #0]
	if (number < 10) lcd_print_letter('0');
 8002c64:	2d09      	cmp	r5, #9
 8002c66:	d802      	bhi.n	8002c6e <actualizeLCD+0x4a>
 8002c68:	2030      	movs	r0, #48	; 0x30
 8002c6a:	f7ff fc81 	bl	8002570 <lcd_print_letter>
	lcd_print_int(number);
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f7ff fc9a 	bl	80025a8 <lcd_print_int>
	lcd_print_letter(':');
 8002c74:	203a      	movs	r0, #58	; 0x3a
 8002c76:	f7ff fc7b 	bl	8002570 <lcd_print_letter>
	number = sTime.Minutes;
 8002c7a:	7865      	ldrb	r5, [r4, #1]
	if(number < 10) lcd_print_letter('0');
 8002c7c:	2d09      	cmp	r5, #9
 8002c7e:	d802      	bhi.n	8002c86 <actualizeLCD+0x62>
 8002c80:	2030      	movs	r0, #48	; 0x30
 8002c82:	f7ff fc75 	bl	8002570 <lcd_print_letter>
	lcd_print_int(number);
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fc8e 	bl	80025a8 <lcd_print_int>
	lcd_print_letter(':');
 8002c8c:	203a      	movs	r0, #58	; 0x3a
 8002c8e:	f7ff fc6f 	bl	8002570 <lcd_print_letter>
	number = sTime.Seconds;
 8002c92:	78a4      	ldrb	r4, [r4, #2]
	if(number < 10) lcd_print_letter('0');
 8002c94:	2c09      	cmp	r4, #9
 8002c96:	d802      	bhi.n	8002c9e <actualizeLCD+0x7a>
 8002c98:	2030      	movs	r0, #48	; 0x30
 8002c9a:	f7ff fc69 	bl	8002570 <lcd_print_letter>
	lcd_print_int(number);
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff fc82 	bl	80025a8 <lcd_print_int>

	lcd_print_letter(' ');
 8002ca4:	2020      	movs	r0, #32
 8002ca6:	f7ff fc63 	bl	8002570 <lcd_print_letter>
	lcd_print_int((uint16_t)measured_energy);
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <actualizeLCD+0xc8>)
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	f7fd fe18 	bl	80008e4 <__aeabi_d2uiz>
 8002cb4:	b280      	uxth	r0, r0
 8002cb6:	f7ff fc77 	bl	80025a8 <lcd_print_int>
	lcd_print("mAh");


}
 8002cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_print("mAh");
 8002cbe:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <actualizeLCD+0xcc>)
 8002cc0:	f7ff bc68 	b.w	8002594 <lcd_print>
		HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	480a      	ldr	r0, [pc, #40]	; (8002cf4 <actualizeLCD+0xd0>)
 8002cca:	f7fe ff17 	bl	8001afc <HAL_RTC_GetTime>
 8002cce:	e7c8      	b.n	8002c62 <actualizeLCD+0x3e>
 8002cd0:	20000098 	.word	0x20000098
 8002cd4:	200001bc 	.word	0x200001bc
 8002cd8:	0800391b 	.word	0x0800391b
 8002cdc:	200000b4 	.word	0x200000b4
 8002ce0:	08003920 	.word	0x08003920
 8002ce4:	20000009 	.word	0x20000009
 8002ce8:	200001bf 	.word	0x200001bf
 8002cec:	200000a8 	.word	0x200000a8
 8002cf0:	08003923 	.word	0x08003923
 8002cf4:	20000168 	.word	0x20000168

08002cf8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_MspInit+0x3c>)
{
 8002cfa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	f002 0201 	and.w	r2, r2, #1
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d14:	61da      	str	r2, [r3, #28]
 8002d16:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d22:	6853      	ldr	r3, [r2, #4]
 8002d24:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2e:	b002      	add	sp, #8
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010000 	.word	0x40010000

08002d3c <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	2210      	movs	r2, #16
{
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	4604      	mov	r4, r0
 8002d42:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	eb0d 0002 	add.w	r0, sp, r2
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f000 f987 	bl	800305c <memset>
  if(hadc->Instance==ADC1)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <HAL_ADC_MspInit+0x94>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d124      	bne.n	8002da0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_ADC_MspInit+0x98>)
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	619a      	str	r2, [r3, #24]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002d66:	9200      	str	r2, [sp, #0]
 8002d68:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	f042 0204 	orr.w	r2, r2, #4
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	9b01      	ldr	r3, [sp, #4]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d7c:	2301      	movs	r3, #1
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC2 GPIO Configuration    
    PA1     ------> ADC2_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d80:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	a904      	add	r1, sp, #16
 8002d84:	4814      	ldr	r0, [pc, #80]	; (8002dd8 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f7fe f936 	bl	8000ff8 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2012      	movs	r0, #18
 8002d90:	4611      	mov	r1, r2
 8002d92:	f7fe f8db 	bl	8000f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d96:	2012      	movs	r0, #18
 8002d98:	f7fe f90c 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d9c:	b008      	add	sp, #32
 8002d9e:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_ADC_MspInit+0xa0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d1fa      	bne.n	8002d9c <HAL_ADC_MspInit+0x60>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_ADC_MspInit+0x98>)
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dae:	619a      	str	r2, [r3, #24]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002db6:	9202      	str	r2, [sp, #8]
 8002db8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	f042 0204 	orr.w	r2, r2, #4
 8002dc0:	619a      	str	r2, [r3, #24]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	9303      	str	r3, [sp, #12]
 8002dca:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e7d6      	b.n	8002d7e <HAL_ADC_MspInit+0x42>
 8002dd0:	40012400 	.word	0x40012400
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010800 	.word	0x40010800
 8002ddc:	40012800 	.word	0x40012800

08002de0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002de0:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_RTC_MspInit+0x3c>)
 8002de4:	6802      	ldr	r2, [r0, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d115      	bne.n	8002e16 <HAL_RTC_MspInit+0x36>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002dea:	f7fe f9fd 	bl	80011e8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dee:	2101      	movs	r1, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RTC_MspInit+0x40>)
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8002df2:	2003      	movs	r0, #3
    __HAL_RCC_BKP_CLK_ENABLE();
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002dfa:	61da      	str	r2, [r3, #28]
 8002dfc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8002dfe:	2200      	movs	r2, #0
    __HAL_RCC_BKP_CLK_ENABLE();
 8002e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RTC_MspInit+0x44>)
 8002e0a:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8002e0c:	f7fe f89e 	bl	8000f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f7fe f8cf 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e16:	b003      	add	sp, #12
 8002e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1c:	40002800 	.word	0x40002800
 8002e20:	40021000 	.word	0x40021000
 8002e24:	4242043c 	.word	0x4242043c

08002e28 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8002e28:	6803      	ldr	r3, [r0, #0]
{
 8002e2a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d10d      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	61da      	str	r2, [r3, #28]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e48:	b003      	add	sp, #12
 8002e4a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <HAL_TIM_Base_MspInit+0x54>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d1f9      	bne.n	8002e48 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e56:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	f042 0202 	orr.w	r2, r2, #2
 8002e5e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e62:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e64:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e6e:	f7fe f86d 	bl	8000f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e72:	201d      	movs	r0, #29
 8002e74:	f7fe f89e 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
}
 8002e78:	e7e6      	b.n	8002e48 <HAL_TIM_Base_MspInit+0x20>
 8002e7a:	bf00      	nop
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e84:	b510      	push	{r4, lr}
 8002e86:	4604      	mov	r4, r0
 8002e88:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	a802      	add	r0, sp, #8
 8002e90:	f000 f8e4 	bl	800305c <memset>
  if(htim->Instance==TIM2)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d11e      	bne.n	8002eda <HAL_TIM_MspPostInit+0x56>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002ea0:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	f042 0204 	orr.w	r2, r2, #4
 8002ea8:	619a      	str	r2, [r3, #24]
 8002eaa:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f7fe f898 	bl	8000ff8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <HAL_TIM_MspPostInit+0x60>)
 8002eca:	6853      	ldr	r3, [r2, #4]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eda:	b006      	add	sp, #24
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <NMI_Handler>:
 8002ee8:	4770      	bx	lr

08002eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eea:	e7fe      	b.n	8002eea <HardFault_Handler>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	e7fe      	b.n	8002eec <MemManage_Handler>

08002eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eee:	e7fe      	b.n	8002eee <BusFault_Handler>

08002ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef0:	e7fe      	b.n	8002ef0 <UsageFault_Handler>

08002ef2 <SVC_Handler>:
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	4770      	bx	lr

08002ef8 <SysTick_Handler>:
{
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef8:	f7fd bd4a 	b.w	8000990 <HAL_IncTick>

08002efc <RTC_IRQHandler>:
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */
	actualize_lcd = TRUE;
 8002efc:	2201      	movs	r2, #1
 8002efe:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <RTC_IRQHandler+0xc>)
  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <RTC_IRQHandler+0x10>)
	actualize_lcd = TRUE;
 8002f02:	701a      	strb	r2, [r3, #0]
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002f04:	f7fe bf32 	b.w	8001d6c <HAL_RTCEx_RTCIRQHandler>
 8002f08:	20000095 	.word	0x20000095
 8002f0c:	20000168 	.word	0x20000168

08002f10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f12:	4804      	ldr	r0, [pc, #16]	; (8002f24 <ADC1_2_IRQHandler+0x14>)
 8002f14:	f7fd fd64 	bl	80009e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */


  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <ADC1_2_IRQHandler+0x18>)
 8002f1e:	f7fd bd5f 	b.w	80009e0 <HAL_ADC_IRQHandler>
 8002f22:	bf00      	nop
 8002f24:	20000138 	.word	0x20000138
 8002f28:	200000c8 	.word	0x200000c8

08002f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002f2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f32:	f7fe f94d 	bl	80011d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002f3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f3e:	f7fe b947 	b.w	80011d0 <HAL_GPIO_EXTI_IRQHandler>
	...

08002f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (last_time == 0) // computed last iteration
 8002f46:	4c09      	ldr	r4, [pc, #36]	; (8002f6c <TIM3_IRQHandler+0x28>)
  HAL_TIM_IRQHandler(&htim3);
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <TIM3_IRQHandler+0x2c>)
 8002f4a:	f7ff f86b 	bl	8002024 <HAL_TIM_IRQHandler>
  if (last_time == 0) // computed last iteration
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	b92b      	cbnz	r3, 8002f5e <TIM3_IRQHandler+0x1a>
  {
	  HAL_ADC_Start_IT(&hadc1);
 8002f52:	4808      	ldr	r0, [pc, #32]	; (8002f74 <TIM3_IRQHandler+0x30>)
 8002f54:	f7fd fe76 	bl	8000c44 <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc2);
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <TIM3_IRQHandler+0x34>)
 8002f5a:	f7fd fe73 	bl	8000c44 <HAL_ADC_Start_IT>
  }
   last_time += interrupt_time_counter_TIM3;
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8002f64:	3380      	adds	r3, #128	; 0x80
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000009c 	.word	0x2000009c
 8002f70:	200000f8 	.word	0x200000f8
 8002f74:	20000138 	.word	0x20000138
 8002f78:	200000c8 	.word	0x200000c8

08002f7c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <SystemInit+0x40>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <SystemInit+0x44>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f98:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002faa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002fae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <SystemInit+0x48>)
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	f8ff0000 	.word	0xf8ff0000
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fca:	e003      	b.n	8002fd4 <LoopCopyDataInit>

08002fcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fd2:	3104      	adds	r1, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fd4:	480a      	ldr	r0, [pc, #40]	; (8003000 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fdc:	d3f6      	bcc.n	8002fcc <CopyDataInit>
  ldr r2, =_sbss
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fe0:	e002      	b.n	8002fe8 <LoopFillZerobss>

08002fe2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fe4:	f842 3b04 	str.w	r3, [r2], #4

08002fe8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fec:	d3f9      	bcc.n	8002fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fee:	f7ff ffc5 	bl	8002f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f000 f80f 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7ff fbbf 	bl	8002778 <main>
  bx lr
 8002ffa:	4770      	bx	lr
  ldr r3, =_sidata
 8002ffc:	0800397c 	.word	0x0800397c
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003004:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003008:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800300c:	200001c8 	.word	0x200001c8

08003010 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <CAN1_RX1_IRQHandler>
	...

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	2500      	movs	r5, #0
 8003018:	4e0c      	ldr	r6, [pc, #48]	; (800304c <__libc_init_array+0x38>)
 800301a:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301c:	1ba4      	subs	r4, r4, r6
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	42a5      	cmp	r5, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	f000 fc5c 	bl	80038e0 <_init>
 8003028:	2500      	movs	r5, #0
 800302a:	4e0a      	ldr	r6, [pc, #40]	; (8003054 <__libc_init_array+0x40>)
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <__libc_init_array+0x44>)
 800302e:	1ba4      	subs	r4, r4, r6
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	42a5      	cmp	r5, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800303c:	4798      	blx	r3
 800303e:	3501      	adds	r5, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003046:	4798      	blx	r3
 8003048:	3501      	adds	r5, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	08003974 	.word	0x08003974
 8003050:	08003974 	.word	0x08003974
 8003054:	08003974 	.word	0x08003974
 8003058:	08003978 	.word	0x08003978

0800305c <memset>:
 800305c:	4603      	mov	r3, r0
 800305e:	4402      	add	r2, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <siprintf>:
 800306c:	b40e      	push	{r1, r2, r3}
 800306e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003072:	b500      	push	{lr}
 8003074:	b09c      	sub	sp, #112	; 0x70
 8003076:	f8ad 1014 	strh.w	r1, [sp, #20]
 800307a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800307e:	9104      	str	r1, [sp, #16]
 8003080:	9107      	str	r1, [sp, #28]
 8003082:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003086:	ab1d      	add	r3, sp, #116	; 0x74
 8003088:	9002      	str	r0, [sp, #8]
 800308a:	9006      	str	r0, [sp, #24]
 800308c:	4808      	ldr	r0, [pc, #32]	; (80030b0 <siprintf+0x44>)
 800308e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003092:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003096:	6800      	ldr	r0, [r0, #0]
 8003098:	a902      	add	r1, sp, #8
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	f000 f8ea 	bl	8003274 <_svfiprintf_r>
 80030a0:	2200      	movs	r2, #0
 80030a2:	9b02      	ldr	r3, [sp, #8]
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	b01c      	add	sp, #112	; 0x70
 80030a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030ac:	b003      	add	sp, #12
 80030ae:	4770      	bx	lr
 80030b0:	20000010 	.word	0x20000010

080030b4 <_malloc_r>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	1ccd      	adds	r5, r1, #3
 80030b8:	f025 0503 	bic.w	r5, r5, #3
 80030bc:	3508      	adds	r5, #8
 80030be:	2d0c      	cmp	r5, #12
 80030c0:	bf38      	it	cc
 80030c2:	250c      	movcc	r5, #12
 80030c4:	2d00      	cmp	r5, #0
 80030c6:	4606      	mov	r6, r0
 80030c8:	db01      	blt.n	80030ce <_malloc_r+0x1a>
 80030ca:	42a9      	cmp	r1, r5
 80030cc:	d903      	bls.n	80030d6 <_malloc_r+0x22>
 80030ce:	230c      	movs	r3, #12
 80030d0:	6033      	str	r3, [r6, #0]
 80030d2:	2000      	movs	r0, #0
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	f000 fb9c 	bl	8003812 <__malloc_lock>
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <_malloc_r+0xb4>)
 80030dc:	6814      	ldr	r4, [r2, #0]
 80030de:	4621      	mov	r1, r4
 80030e0:	b991      	cbnz	r1, 8003108 <_malloc_r+0x54>
 80030e2:	4c22      	ldr	r4, [pc, #136]	; (800316c <_malloc_r+0xb8>)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	b91b      	cbnz	r3, 80030f0 <_malloc_r+0x3c>
 80030e8:	4630      	mov	r0, r6
 80030ea:	f000 fb4f 	bl	800378c <_sbrk_r>
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	4629      	mov	r1, r5
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 fb4a 	bl	800378c <_sbrk_r>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d126      	bne.n	800314a <_malloc_r+0x96>
 80030fc:	230c      	movs	r3, #12
 80030fe:	4630      	mov	r0, r6
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	f000 fb87 	bl	8003814 <__malloc_unlock>
 8003106:	e7e4      	b.n	80030d2 <_malloc_r+0x1e>
 8003108:	680b      	ldr	r3, [r1, #0]
 800310a:	1b5b      	subs	r3, r3, r5
 800310c:	d41a      	bmi.n	8003144 <_malloc_r+0x90>
 800310e:	2b0b      	cmp	r3, #11
 8003110:	d90f      	bls.n	8003132 <_malloc_r+0x7e>
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	18cc      	adds	r4, r1, r3
 8003116:	50cd      	str	r5, [r1, r3]
 8003118:	4630      	mov	r0, r6
 800311a:	f000 fb7b 	bl	8003814 <__malloc_unlock>
 800311e:	f104 000b 	add.w	r0, r4, #11
 8003122:	1d23      	adds	r3, r4, #4
 8003124:	f020 0007 	bic.w	r0, r0, #7
 8003128:	1ac3      	subs	r3, r0, r3
 800312a:	d01b      	beq.n	8003164 <_malloc_r+0xb0>
 800312c:	425a      	negs	r2, r3
 800312e:	50e2      	str	r2, [r4, r3]
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	428c      	cmp	r4, r1
 8003134:	bf0b      	itete	eq
 8003136:	6863      	ldreq	r3, [r4, #4]
 8003138:	684b      	ldrne	r3, [r1, #4]
 800313a:	6013      	streq	r3, [r2, #0]
 800313c:	6063      	strne	r3, [r4, #4]
 800313e:	bf18      	it	ne
 8003140:	460c      	movne	r4, r1
 8003142:	e7e9      	b.n	8003118 <_malloc_r+0x64>
 8003144:	460c      	mov	r4, r1
 8003146:	6849      	ldr	r1, [r1, #4]
 8003148:	e7ca      	b.n	80030e0 <_malloc_r+0x2c>
 800314a:	1cc4      	adds	r4, r0, #3
 800314c:	f024 0403 	bic.w	r4, r4, #3
 8003150:	42a0      	cmp	r0, r4
 8003152:	d005      	beq.n	8003160 <_malloc_r+0xac>
 8003154:	1a21      	subs	r1, r4, r0
 8003156:	4630      	mov	r0, r6
 8003158:	f000 fb18 	bl	800378c <_sbrk_r>
 800315c:	3001      	adds	r0, #1
 800315e:	d0cd      	beq.n	80030fc <_malloc_r+0x48>
 8003160:	6025      	str	r5, [r4, #0]
 8003162:	e7d9      	b.n	8003118 <_malloc_r+0x64>
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	bf00      	nop
 8003168:	200000b8 	.word	0x200000b8
 800316c:	200000bc 	.word	0x200000bc

08003170 <_realloc_r>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	4607      	mov	r7, r0
 8003174:	4614      	mov	r4, r2
 8003176:	460e      	mov	r6, r1
 8003178:	b921      	cbnz	r1, 8003184 <_realloc_r+0x14>
 800317a:	4611      	mov	r1, r2
 800317c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003180:	f7ff bf98 	b.w	80030b4 <_malloc_r>
 8003184:	b922      	cbnz	r2, 8003190 <_realloc_r+0x20>
 8003186:	f000 fb47 	bl	8003818 <_free_r>
 800318a:	4625      	mov	r5, r4
 800318c:	4628      	mov	r0, r5
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003190:	f000 fb8e 	bl	80038b0 <_malloc_usable_size_r>
 8003194:	4284      	cmp	r4, r0
 8003196:	d90f      	bls.n	80031b8 <_realloc_r+0x48>
 8003198:	4621      	mov	r1, r4
 800319a:	4638      	mov	r0, r7
 800319c:	f7ff ff8a 	bl	80030b4 <_malloc_r>
 80031a0:	4605      	mov	r5, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d0f2      	beq.n	800318c <_realloc_r+0x1c>
 80031a6:	4631      	mov	r1, r6
 80031a8:	4622      	mov	r2, r4
 80031aa:	f000 fb0d 	bl	80037c8 <memcpy>
 80031ae:	4631      	mov	r1, r6
 80031b0:	4638      	mov	r0, r7
 80031b2:	f000 fb31 	bl	8003818 <_free_r>
 80031b6:	e7e9      	b.n	800318c <_realloc_r+0x1c>
 80031b8:	4635      	mov	r5, r6
 80031ba:	e7e7      	b.n	800318c <_realloc_r+0x1c>

080031bc <__ssputs_r>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	688e      	ldr	r6, [r1, #8]
 80031c2:	4682      	mov	sl, r0
 80031c4:	429e      	cmp	r6, r3
 80031c6:	460c      	mov	r4, r1
 80031c8:	4691      	mov	r9, r2
 80031ca:	4698      	mov	r8, r3
 80031cc:	d835      	bhi.n	800323a <__ssputs_r+0x7e>
 80031ce:	898a      	ldrh	r2, [r1, #12]
 80031d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d4:	d031      	beq.n	800323a <__ssputs_r+0x7e>
 80031d6:	2302      	movs	r3, #2
 80031d8:	6825      	ldr	r5, [r4, #0]
 80031da:	6909      	ldr	r1, [r1, #16]
 80031dc:	1a6f      	subs	r7, r5, r1
 80031de:	6965      	ldr	r5, [r4, #20]
 80031e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80031e8:	f108 0301 	add.w	r3, r8, #1
 80031ec:	443b      	add	r3, r7
 80031ee:	429d      	cmp	r5, r3
 80031f0:	bf38      	it	cc
 80031f2:	461d      	movcc	r5, r3
 80031f4:	0553      	lsls	r3, r2, #21
 80031f6:	d531      	bpl.n	800325c <__ssputs_r+0xa0>
 80031f8:	4629      	mov	r1, r5
 80031fa:	f7ff ff5b 	bl	80030b4 <_malloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	b950      	cbnz	r0, 8003218 <__ssputs_r+0x5c>
 8003202:	230c      	movs	r3, #12
 8003204:	f8ca 3000 	str.w	r3, [sl]
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	f04f 30ff 	mov.w	r0, #4294967295
 800320e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003212:	81a3      	strh	r3, [r4, #12]
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	463a      	mov	r2, r7
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	f000 fad4 	bl	80037c8 <memcpy>
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	6126      	str	r6, [r4, #16]
 800322e:	443e      	add	r6, r7
 8003230:	6026      	str	r6, [r4, #0]
 8003232:	4646      	mov	r6, r8
 8003234:	6165      	str	r5, [r4, #20]
 8003236:	1bed      	subs	r5, r5, r7
 8003238:	60a5      	str	r5, [r4, #8]
 800323a:	4546      	cmp	r6, r8
 800323c:	bf28      	it	cs
 800323e:	4646      	movcs	r6, r8
 8003240:	4649      	mov	r1, r9
 8003242:	4632      	mov	r2, r6
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	f000 faca 	bl	80037de <memmove>
 800324a:	68a3      	ldr	r3, [r4, #8]
 800324c:	2000      	movs	r0, #0
 800324e:	1b9b      	subs	r3, r3, r6
 8003250:	60a3      	str	r3, [r4, #8]
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	441e      	add	r6, r3
 8003256:	6026      	str	r6, [r4, #0]
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	462a      	mov	r2, r5
 800325e:	f7ff ff87 	bl	8003170 <_realloc_r>
 8003262:	4606      	mov	r6, r0
 8003264:	2800      	cmp	r0, #0
 8003266:	d1e1      	bne.n	800322c <__ssputs_r+0x70>
 8003268:	6921      	ldr	r1, [r4, #16]
 800326a:	4650      	mov	r0, sl
 800326c:	f000 fad4 	bl	8003818 <_free_r>
 8003270:	e7c7      	b.n	8003202 <__ssputs_r+0x46>
	...

08003274 <_svfiprintf_r>:
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	b09d      	sub	sp, #116	; 0x74
 800327a:	9303      	str	r3, [sp, #12]
 800327c:	898b      	ldrh	r3, [r1, #12]
 800327e:	4680      	mov	r8, r0
 8003280:	061c      	lsls	r4, r3, #24
 8003282:	460d      	mov	r5, r1
 8003284:	4616      	mov	r6, r2
 8003286:	d50f      	bpl.n	80032a8 <_svfiprintf_r+0x34>
 8003288:	690b      	ldr	r3, [r1, #16]
 800328a:	b96b      	cbnz	r3, 80032a8 <_svfiprintf_r+0x34>
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	f7ff ff11 	bl	80030b4 <_malloc_r>
 8003292:	6028      	str	r0, [r5, #0]
 8003294:	6128      	str	r0, [r5, #16]
 8003296:	b928      	cbnz	r0, 80032a4 <_svfiprintf_r+0x30>
 8003298:	230c      	movs	r3, #12
 800329a:	f8c8 3000 	str.w	r3, [r8]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	e0c4      	b.n	800342e <_svfiprintf_r+0x1ba>
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	616b      	str	r3, [r5, #20]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9309      	str	r3, [sp, #36]	; 0x24
 80032ac:	2320      	movs	r3, #32
 80032ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b2:	2330      	movs	r3, #48	; 0x30
 80032b4:	f04f 0b01 	mov.w	fp, #1
 80032b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032bc:	4637      	mov	r7, r6
 80032be:	463c      	mov	r4, r7
 80032c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13c      	bne.n	8003342 <_svfiprintf_r+0xce>
 80032c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80032cc:	d00b      	beq.n	80032e6 <_svfiprintf_r+0x72>
 80032ce:	4653      	mov	r3, sl
 80032d0:	4632      	mov	r2, r6
 80032d2:	4629      	mov	r1, r5
 80032d4:	4640      	mov	r0, r8
 80032d6:	f7ff ff71 	bl	80031bc <__ssputs_r>
 80032da:	3001      	adds	r0, #1
 80032dc:	f000 80a2 	beq.w	8003424 <_svfiprintf_r+0x1b0>
 80032e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e2:	4453      	add	r3, sl
 80032e4:	9309      	str	r3, [sp, #36]	; 0x24
 80032e6:	783b      	ldrb	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 809b 	beq.w	8003424 <_svfiprintf_r+0x1b0>
 80032ee:	2300      	movs	r3, #0
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9307      	str	r3, [sp, #28]
 80032f8:	9205      	str	r2, [sp, #20]
 80032fa:	9306      	str	r3, [sp, #24]
 80032fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003300:	931a      	str	r3, [sp, #104]	; 0x68
 8003302:	2205      	movs	r2, #5
 8003304:	7821      	ldrb	r1, [r4, #0]
 8003306:	4850      	ldr	r0, [pc, #320]	; (8003448 <_svfiprintf_r+0x1d4>)
 8003308:	f000 fa50 	bl	80037ac <memchr>
 800330c:	1c67      	adds	r7, r4, #1
 800330e:	9b04      	ldr	r3, [sp, #16]
 8003310:	b9d8      	cbnz	r0, 800334a <_svfiprintf_r+0xd6>
 8003312:	06d9      	lsls	r1, r3, #27
 8003314:	bf44      	itt	mi
 8003316:	2220      	movmi	r2, #32
 8003318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800331c:	071a      	lsls	r2, r3, #28
 800331e:	bf44      	itt	mi
 8003320:	222b      	movmi	r2, #43	; 0x2b
 8003322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003326:	7822      	ldrb	r2, [r4, #0]
 8003328:	2a2a      	cmp	r2, #42	; 0x2a
 800332a:	d016      	beq.n	800335a <_svfiprintf_r+0xe6>
 800332c:	2100      	movs	r1, #0
 800332e:	200a      	movs	r0, #10
 8003330:	9a07      	ldr	r2, [sp, #28]
 8003332:	4627      	mov	r7, r4
 8003334:	783b      	ldrb	r3, [r7, #0]
 8003336:	3401      	adds	r4, #1
 8003338:	3b30      	subs	r3, #48	; 0x30
 800333a:	2b09      	cmp	r3, #9
 800333c:	d950      	bls.n	80033e0 <_svfiprintf_r+0x16c>
 800333e:	b1c9      	cbz	r1, 8003374 <_svfiprintf_r+0x100>
 8003340:	e011      	b.n	8003366 <_svfiprintf_r+0xf2>
 8003342:	2b25      	cmp	r3, #37	; 0x25
 8003344:	d0c0      	beq.n	80032c8 <_svfiprintf_r+0x54>
 8003346:	4627      	mov	r7, r4
 8003348:	e7b9      	b.n	80032be <_svfiprintf_r+0x4a>
 800334a:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <_svfiprintf_r+0x1d4>)
 800334c:	463c      	mov	r4, r7
 800334e:	1a80      	subs	r0, r0, r2
 8003350:	fa0b f000 	lsl.w	r0, fp, r0
 8003354:	4318      	orrs	r0, r3
 8003356:	9004      	str	r0, [sp, #16]
 8003358:	e7d3      	b.n	8003302 <_svfiprintf_r+0x8e>
 800335a:	9a03      	ldr	r2, [sp, #12]
 800335c:	1d11      	adds	r1, r2, #4
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	9103      	str	r1, [sp, #12]
 8003362:	2a00      	cmp	r2, #0
 8003364:	db01      	blt.n	800336a <_svfiprintf_r+0xf6>
 8003366:	9207      	str	r2, [sp, #28]
 8003368:	e004      	b.n	8003374 <_svfiprintf_r+0x100>
 800336a:	4252      	negs	r2, r2
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	9207      	str	r2, [sp, #28]
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	783b      	ldrb	r3, [r7, #0]
 8003376:	2b2e      	cmp	r3, #46	; 0x2e
 8003378:	d10d      	bne.n	8003396 <_svfiprintf_r+0x122>
 800337a:	787b      	ldrb	r3, [r7, #1]
 800337c:	1c79      	adds	r1, r7, #1
 800337e:	2b2a      	cmp	r3, #42	; 0x2a
 8003380:	d132      	bne.n	80033e8 <_svfiprintf_r+0x174>
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	3702      	adds	r7, #2
 8003386:	1d1a      	adds	r2, r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	9203      	str	r2, [sp, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfb8      	it	lt
 8003390:	f04f 33ff 	movlt.w	r3, #4294967295
 8003394:	9305      	str	r3, [sp, #20]
 8003396:	4c2d      	ldr	r4, [pc, #180]	; (800344c <_svfiprintf_r+0x1d8>)
 8003398:	2203      	movs	r2, #3
 800339a:	7839      	ldrb	r1, [r7, #0]
 800339c:	4620      	mov	r0, r4
 800339e:	f000 fa05 	bl	80037ac <memchr>
 80033a2:	b138      	cbz	r0, 80033b4 <_svfiprintf_r+0x140>
 80033a4:	2340      	movs	r3, #64	; 0x40
 80033a6:	1b00      	subs	r0, r0, r4
 80033a8:	fa03 f000 	lsl.w	r0, r3, r0
 80033ac:	9b04      	ldr	r3, [sp, #16]
 80033ae:	3701      	adds	r7, #1
 80033b0:	4303      	orrs	r3, r0
 80033b2:	9304      	str	r3, [sp, #16]
 80033b4:	7839      	ldrb	r1, [r7, #0]
 80033b6:	2206      	movs	r2, #6
 80033b8:	4825      	ldr	r0, [pc, #148]	; (8003450 <_svfiprintf_r+0x1dc>)
 80033ba:	1c7e      	adds	r6, r7, #1
 80033bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033c0:	f000 f9f4 	bl	80037ac <memchr>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d035      	beq.n	8003434 <_svfiprintf_r+0x1c0>
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <_svfiprintf_r+0x1e0>)
 80033ca:	b9fb      	cbnz	r3, 800340c <_svfiprintf_r+0x198>
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	3307      	adds	r3, #7
 80033d0:	f023 0307 	bic.w	r3, r3, #7
 80033d4:	3308      	adds	r3, #8
 80033d6:	9303      	str	r3, [sp, #12]
 80033d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033da:	444b      	add	r3, r9
 80033dc:	9309      	str	r3, [sp, #36]	; 0x24
 80033de:	e76d      	b.n	80032bc <_svfiprintf_r+0x48>
 80033e0:	fb00 3202 	mla	r2, r0, r2, r3
 80033e4:	2101      	movs	r1, #1
 80033e6:	e7a4      	b.n	8003332 <_svfiprintf_r+0xbe>
 80033e8:	2300      	movs	r3, #0
 80033ea:	240a      	movs	r4, #10
 80033ec:	4618      	mov	r0, r3
 80033ee:	9305      	str	r3, [sp, #20]
 80033f0:	460f      	mov	r7, r1
 80033f2:	783a      	ldrb	r2, [r7, #0]
 80033f4:	3101      	adds	r1, #1
 80033f6:	3a30      	subs	r2, #48	; 0x30
 80033f8:	2a09      	cmp	r2, #9
 80033fa:	d903      	bls.n	8003404 <_svfiprintf_r+0x190>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ca      	beq.n	8003396 <_svfiprintf_r+0x122>
 8003400:	9005      	str	r0, [sp, #20]
 8003402:	e7c8      	b.n	8003396 <_svfiprintf_r+0x122>
 8003404:	fb04 2000 	mla	r0, r4, r0, r2
 8003408:	2301      	movs	r3, #1
 800340a:	e7f1      	b.n	80033f0 <_svfiprintf_r+0x17c>
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	462a      	mov	r2, r5
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_svfiprintf_r+0x1e4>)
 8003414:	a904      	add	r1, sp, #16
 8003416:	4640      	mov	r0, r8
 8003418:	f3af 8000 	nop.w
 800341c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003420:	4681      	mov	r9, r0
 8003422:	d1d9      	bne.n	80033d8 <_svfiprintf_r+0x164>
 8003424:	89ab      	ldrh	r3, [r5, #12]
 8003426:	065b      	lsls	r3, r3, #25
 8003428:	f53f af39 	bmi.w	800329e <_svfiprintf_r+0x2a>
 800342c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800342e:	b01d      	add	sp, #116	; 0x74
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003434:	ab03      	add	r3, sp, #12
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	462a      	mov	r2, r5
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <_svfiprintf_r+0x1e4>)
 800343c:	a904      	add	r1, sp, #16
 800343e:	4640      	mov	r0, r8
 8003440:	f000 f884 	bl	800354c <_printf_i>
 8003444:	e7ea      	b.n	800341c <_svfiprintf_r+0x1a8>
 8003446:	bf00      	nop
 8003448:	0800393f 	.word	0x0800393f
 800344c:	08003945 	.word	0x08003945
 8003450:	08003949 	.word	0x08003949
 8003454:	00000000 	.word	0x00000000
 8003458:	080031bd 	.word	0x080031bd

0800345c <_printf_common>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	4691      	mov	r9, r2
 8003462:	461f      	mov	r7, r3
 8003464:	688a      	ldr	r2, [r1, #8]
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	4606      	mov	r6, r0
 800346a:	4293      	cmp	r3, r2
 800346c:	bfb8      	it	lt
 800346e:	4613      	movlt	r3, r2
 8003470:	f8c9 3000 	str.w	r3, [r9]
 8003474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003478:	460c      	mov	r4, r1
 800347a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800347e:	b112      	cbz	r2, 8003486 <_printf_common+0x2a>
 8003480:	3301      	adds	r3, #1
 8003482:	f8c9 3000 	str.w	r3, [r9]
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	0699      	lsls	r1, r3, #26
 800348a:	bf42      	ittt	mi
 800348c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003490:	3302      	addmi	r3, #2
 8003492:	f8c9 3000 	strmi.w	r3, [r9]
 8003496:	6825      	ldr	r5, [r4, #0]
 8003498:	f015 0506 	ands.w	r5, r5, #6
 800349c:	d107      	bne.n	80034ae <_printf_common+0x52>
 800349e:	f104 0a19 	add.w	sl, r4, #25
 80034a2:	68e3      	ldr	r3, [r4, #12]
 80034a4:	f8d9 2000 	ldr.w	r2, [r9]
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	429d      	cmp	r5, r3
 80034ac:	db2a      	blt.n	8003504 <_printf_common+0xa8>
 80034ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	3300      	adds	r3, #0
 80034b6:	bf18      	it	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	0692      	lsls	r2, r2, #26
 80034bc:	d42f      	bmi.n	800351e <_printf_common+0xc2>
 80034be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034c2:	4639      	mov	r1, r7
 80034c4:	4630      	mov	r0, r6
 80034c6:	47c0      	blx	r8
 80034c8:	3001      	adds	r0, #1
 80034ca:	d022      	beq.n	8003512 <_printf_common+0xb6>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	68e5      	ldr	r5, [r4, #12]
 80034d0:	f003 0306 	and.w	r3, r3, #6
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	bf18      	it	ne
 80034d8:	2500      	movne	r5, #0
 80034da:	f8d9 2000 	ldr.w	r2, [r9]
 80034de:	f04f 0900 	mov.w	r9, #0
 80034e2:	bf08      	it	eq
 80034e4:	1aad      	subeq	r5, r5, r2
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	6922      	ldr	r2, [r4, #16]
 80034ea:	bf08      	it	eq
 80034ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bfc4      	itt	gt
 80034f4:	1a9b      	subgt	r3, r3, r2
 80034f6:	18ed      	addgt	r5, r5, r3
 80034f8:	341a      	adds	r4, #26
 80034fa:	454d      	cmp	r5, r9
 80034fc:	d11b      	bne.n	8003536 <_printf_common+0xda>
 80034fe:	2000      	movs	r0, #0
 8003500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003504:	2301      	movs	r3, #1
 8003506:	4652      	mov	r2, sl
 8003508:	4639      	mov	r1, r7
 800350a:	4630      	mov	r0, r6
 800350c:	47c0      	blx	r8
 800350e:	3001      	adds	r0, #1
 8003510:	d103      	bne.n	800351a <_printf_common+0xbe>
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351a:	3501      	adds	r5, #1
 800351c:	e7c1      	b.n	80034a2 <_printf_common+0x46>
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	18e1      	adds	r1, r4, r3
 8003522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800352c:	4422      	add	r2, r4
 800352e:	3302      	adds	r3, #2
 8003530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003534:	e7c3      	b.n	80034be <_printf_common+0x62>
 8003536:	2301      	movs	r3, #1
 8003538:	4622      	mov	r2, r4
 800353a:	4639      	mov	r1, r7
 800353c:	4630      	mov	r0, r6
 800353e:	47c0      	blx	r8
 8003540:	3001      	adds	r0, #1
 8003542:	d0e6      	beq.n	8003512 <_printf_common+0xb6>
 8003544:	f109 0901 	add.w	r9, r9, #1
 8003548:	e7d7      	b.n	80034fa <_printf_common+0x9e>
	...

0800354c <_printf_i>:
 800354c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003550:	4617      	mov	r7, r2
 8003552:	7e0a      	ldrb	r2, [r1, #24]
 8003554:	b085      	sub	sp, #20
 8003556:	2a6e      	cmp	r2, #110	; 0x6e
 8003558:	4698      	mov	r8, r3
 800355a:	4606      	mov	r6, r0
 800355c:	460c      	mov	r4, r1
 800355e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003560:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003564:	f000 80bc 	beq.w	80036e0 <_printf_i+0x194>
 8003568:	d81a      	bhi.n	80035a0 <_printf_i+0x54>
 800356a:	2a63      	cmp	r2, #99	; 0x63
 800356c:	d02e      	beq.n	80035cc <_printf_i+0x80>
 800356e:	d80a      	bhi.n	8003586 <_printf_i+0x3a>
 8003570:	2a00      	cmp	r2, #0
 8003572:	f000 80c8 	beq.w	8003706 <_printf_i+0x1ba>
 8003576:	2a58      	cmp	r2, #88	; 0x58
 8003578:	f000 808a 	beq.w	8003690 <_printf_i+0x144>
 800357c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003580:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003584:	e02a      	b.n	80035dc <_printf_i+0x90>
 8003586:	2a64      	cmp	r2, #100	; 0x64
 8003588:	d001      	beq.n	800358e <_printf_i+0x42>
 800358a:	2a69      	cmp	r2, #105	; 0x69
 800358c:	d1f6      	bne.n	800357c <_printf_i+0x30>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003596:	d023      	beq.n	80035e0 <_printf_i+0x94>
 8003598:	1d11      	adds	r1, r2, #4
 800359a:	6019      	str	r1, [r3, #0]
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	e027      	b.n	80035f0 <_printf_i+0xa4>
 80035a0:	2a73      	cmp	r2, #115	; 0x73
 80035a2:	f000 80b4 	beq.w	800370e <_printf_i+0x1c2>
 80035a6:	d808      	bhi.n	80035ba <_printf_i+0x6e>
 80035a8:	2a6f      	cmp	r2, #111	; 0x6f
 80035aa:	d02a      	beq.n	8003602 <_printf_i+0xb6>
 80035ac:	2a70      	cmp	r2, #112	; 0x70
 80035ae:	d1e5      	bne.n	800357c <_printf_i+0x30>
 80035b0:	680a      	ldr	r2, [r1, #0]
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	600a      	str	r2, [r1, #0]
 80035b8:	e003      	b.n	80035c2 <_printf_i+0x76>
 80035ba:	2a75      	cmp	r2, #117	; 0x75
 80035bc:	d021      	beq.n	8003602 <_printf_i+0xb6>
 80035be:	2a78      	cmp	r2, #120	; 0x78
 80035c0:	d1dc      	bne.n	800357c <_printf_i+0x30>
 80035c2:	2278      	movs	r2, #120	; 0x78
 80035c4:	496f      	ldr	r1, [pc, #444]	; (8003784 <_printf_i+0x238>)
 80035c6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80035ca:	e064      	b.n	8003696 <_printf_i+0x14a>
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80035d2:	1d11      	adds	r1, r2, #4
 80035d4:	6019      	str	r1, [r3, #0]
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035dc:	2301      	movs	r3, #1
 80035de:	e0a3      	b.n	8003728 <_printf_i+0x1dc>
 80035e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80035e4:	f102 0104 	add.w	r1, r2, #4
 80035e8:	6019      	str	r1, [r3, #0]
 80035ea:	d0d7      	beq.n	800359c <_printf_i+0x50>
 80035ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da03      	bge.n	80035fc <_printf_i+0xb0>
 80035f4:	222d      	movs	r2, #45	; 0x2d
 80035f6:	425b      	negs	r3, r3
 80035f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035fc:	4962      	ldr	r1, [pc, #392]	; (8003788 <_printf_i+0x23c>)
 80035fe:	220a      	movs	r2, #10
 8003600:	e017      	b.n	8003632 <_printf_i+0xe6>
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	f010 0f80 	tst.w	r0, #128	; 0x80
 800360a:	d003      	beq.n	8003614 <_printf_i+0xc8>
 800360c:	1d08      	adds	r0, r1, #4
 800360e:	6018      	str	r0, [r3, #0]
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	e006      	b.n	8003622 <_printf_i+0xd6>
 8003614:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003618:	f101 0004 	add.w	r0, r1, #4
 800361c:	6018      	str	r0, [r3, #0]
 800361e:	d0f7      	beq.n	8003610 <_printf_i+0xc4>
 8003620:	880b      	ldrh	r3, [r1, #0]
 8003622:	2a6f      	cmp	r2, #111	; 0x6f
 8003624:	bf14      	ite	ne
 8003626:	220a      	movne	r2, #10
 8003628:	2208      	moveq	r2, #8
 800362a:	4957      	ldr	r1, [pc, #348]	; (8003788 <_printf_i+0x23c>)
 800362c:	2000      	movs	r0, #0
 800362e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003632:	6865      	ldr	r5, [r4, #4]
 8003634:	2d00      	cmp	r5, #0
 8003636:	60a5      	str	r5, [r4, #8]
 8003638:	f2c0 809c 	blt.w	8003774 <_printf_i+0x228>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	f020 0004 	bic.w	r0, r0, #4
 8003642:	6020      	str	r0, [r4, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d13f      	bne.n	80036c8 <_printf_i+0x17c>
 8003648:	2d00      	cmp	r5, #0
 800364a:	f040 8095 	bne.w	8003778 <_printf_i+0x22c>
 800364e:	4675      	mov	r5, lr
 8003650:	2a08      	cmp	r2, #8
 8003652:	d10b      	bne.n	800366c <_printf_i+0x120>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	d508      	bpl.n	800366c <_printf_i+0x120>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	6862      	ldr	r2, [r4, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	bfde      	ittt	le
 8003662:	2330      	movle	r3, #48	; 0x30
 8003664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800366c:	ebae 0305 	sub.w	r3, lr, r5
 8003670:	6123      	str	r3, [r4, #16]
 8003672:	f8cd 8000 	str.w	r8, [sp]
 8003676:	463b      	mov	r3, r7
 8003678:	aa03      	add	r2, sp, #12
 800367a:	4621      	mov	r1, r4
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff feed 	bl	800345c <_printf_common>
 8003682:	3001      	adds	r0, #1
 8003684:	d155      	bne.n	8003732 <_printf_i+0x1e6>
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
 800368a:	b005      	add	sp, #20
 800368c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003690:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003694:	493c      	ldr	r1, [pc, #240]	; (8003788 <_printf_i+0x23c>)
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800369e:	f100 0504 	add.w	r5, r0, #4
 80036a2:	601d      	str	r5, [r3, #0]
 80036a4:	d001      	beq.n	80036aa <_printf_i+0x15e>
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	e002      	b.n	80036b0 <_printf_i+0x164>
 80036aa:	0655      	lsls	r5, r2, #25
 80036ac:	d5fb      	bpl.n	80036a6 <_printf_i+0x15a>
 80036ae:	8803      	ldrh	r3, [r0, #0]
 80036b0:	07d0      	lsls	r0, r2, #31
 80036b2:	bf44      	itt	mi
 80036b4:	f042 0220 	orrmi.w	r2, r2, #32
 80036b8:	6022      	strmi	r2, [r4, #0]
 80036ba:	b91b      	cbnz	r3, 80036c4 <_printf_i+0x178>
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	f022 0220 	bic.w	r2, r2, #32
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	e7b1      	b.n	800362c <_printf_i+0xe0>
 80036c8:	4675      	mov	r5, lr
 80036ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80036ce:	fb02 3310 	mls	r3, r2, r0, r3
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036d8:	4603      	mov	r3, r0
 80036da:	2800      	cmp	r0, #0
 80036dc:	d1f5      	bne.n	80036ca <_printf_i+0x17e>
 80036de:	e7b7      	b.n	8003650 <_printf_i+0x104>
 80036e0:	6808      	ldr	r0, [r1, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80036e8:	6949      	ldr	r1, [r1, #20]
 80036ea:	d004      	beq.n	80036f6 <_printf_i+0x1aa>
 80036ec:	1d10      	adds	r0, r2, #4
 80036ee:	6018      	str	r0, [r3, #0]
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	6019      	str	r1, [r3, #0]
 80036f4:	e007      	b.n	8003706 <_printf_i+0x1ba>
 80036f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036fa:	f102 0004 	add.w	r0, r2, #4
 80036fe:	6018      	str	r0, [r3, #0]
 8003700:	6813      	ldr	r3, [r2, #0]
 8003702:	d0f6      	beq.n	80036f2 <_printf_i+0x1a6>
 8003704:	8019      	strh	r1, [r3, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	4675      	mov	r5, lr
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	e7b1      	b.n	8003672 <_printf_i+0x126>
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	1d11      	adds	r1, r2, #4
 8003712:	6019      	str	r1, [r3, #0]
 8003714:	6815      	ldr	r5, [r2, #0]
 8003716:	2100      	movs	r1, #0
 8003718:	6862      	ldr	r2, [r4, #4]
 800371a:	4628      	mov	r0, r5
 800371c:	f000 f846 	bl	80037ac <memchr>
 8003720:	b108      	cbz	r0, 8003726 <_printf_i+0x1da>
 8003722:	1b40      	subs	r0, r0, r5
 8003724:	6060      	str	r0, [r4, #4]
 8003726:	6863      	ldr	r3, [r4, #4]
 8003728:	6123      	str	r3, [r4, #16]
 800372a:	2300      	movs	r3, #0
 800372c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003730:	e79f      	b.n	8003672 <_printf_i+0x126>
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	462a      	mov	r2, r5
 8003736:	4639      	mov	r1, r7
 8003738:	4630      	mov	r0, r6
 800373a:	47c0      	blx	r8
 800373c:	3001      	adds	r0, #1
 800373e:	d0a2      	beq.n	8003686 <_printf_i+0x13a>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	079b      	lsls	r3, r3, #30
 8003744:	d507      	bpl.n	8003756 <_printf_i+0x20a>
 8003746:	2500      	movs	r5, #0
 8003748:	f104 0919 	add.w	r9, r4, #25
 800374c:	68e3      	ldr	r3, [r4, #12]
 800374e:	9a03      	ldr	r2, [sp, #12]
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	429d      	cmp	r5, r3
 8003754:	db05      	blt.n	8003762 <_printf_i+0x216>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	4298      	cmp	r0, r3
 800375c:	bfb8      	it	lt
 800375e:	4618      	movlt	r0, r3
 8003760:	e793      	b.n	800368a <_printf_i+0x13e>
 8003762:	2301      	movs	r3, #1
 8003764:	464a      	mov	r2, r9
 8003766:	4639      	mov	r1, r7
 8003768:	4630      	mov	r0, r6
 800376a:	47c0      	blx	r8
 800376c:	3001      	adds	r0, #1
 800376e:	d08a      	beq.n	8003686 <_printf_i+0x13a>
 8003770:	3501      	adds	r5, #1
 8003772:	e7eb      	b.n	800374c <_printf_i+0x200>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1a7      	bne.n	80036c8 <_printf_i+0x17c>
 8003778:	780b      	ldrb	r3, [r1, #0]
 800377a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003782:	e765      	b.n	8003650 <_printf_i+0x104>
 8003784:	08003961 	.word	0x08003961
 8003788:	08003950 	.word	0x08003950

0800378c <_sbrk_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	2300      	movs	r3, #0
 8003790:	4c05      	ldr	r4, [pc, #20]	; (80037a8 <_sbrk_r+0x1c>)
 8003792:	4605      	mov	r5, r0
 8003794:	4608      	mov	r0, r1
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	f000 f894 	bl	80038c4 <_sbrk>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <_sbrk_r+0x1a>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	b103      	cbz	r3, 80037a6 <_sbrk_r+0x1a>
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	200001c4 	.word	0x200001c4

080037ac <memchr>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	b2c9      	uxtb	r1, r1
 80037b0:	4402      	add	r2, r0
 80037b2:	4290      	cmp	r0, r2
 80037b4:	4603      	mov	r3, r0
 80037b6:	d101      	bne.n	80037bc <memchr+0x10>
 80037b8:	2000      	movs	r0, #0
 80037ba:	bd10      	pop	{r4, pc}
 80037bc:	781c      	ldrb	r4, [r3, #0]
 80037be:	3001      	adds	r0, #1
 80037c0:	428c      	cmp	r4, r1
 80037c2:	d1f6      	bne.n	80037b2 <memchr+0x6>
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <memcpy>:
 80037c8:	b510      	push	{r4, lr}
 80037ca:	1e43      	subs	r3, r0, #1
 80037cc:	440a      	add	r2, r1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	d100      	bne.n	80037d4 <memcpy+0xc>
 80037d2:	bd10      	pop	{r4, pc}
 80037d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037dc:	e7f7      	b.n	80037ce <memcpy+0x6>

080037de <memmove>:
 80037de:	4288      	cmp	r0, r1
 80037e0:	b510      	push	{r4, lr}
 80037e2:	eb01 0302 	add.w	r3, r1, r2
 80037e6:	d803      	bhi.n	80037f0 <memmove+0x12>
 80037e8:	1e42      	subs	r2, r0, #1
 80037ea:	4299      	cmp	r1, r3
 80037ec:	d10c      	bne.n	8003808 <memmove+0x2a>
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	4298      	cmp	r0, r3
 80037f2:	d2f9      	bcs.n	80037e8 <memmove+0xa>
 80037f4:	1881      	adds	r1, r0, r2
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	42d3      	cmn	r3, r2
 80037fa:	d100      	bne.n	80037fe <memmove+0x20>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003802:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003806:	e7f7      	b.n	80037f8 <memmove+0x1a>
 8003808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800380c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003810:	e7eb      	b.n	80037ea <memmove+0xc>

08003812 <__malloc_lock>:
 8003812:	4770      	bx	lr

08003814 <__malloc_unlock>:
 8003814:	4770      	bx	lr
	...

08003818 <_free_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4605      	mov	r5, r0
 800381c:	2900      	cmp	r1, #0
 800381e:	d043      	beq.n	80038a8 <_free_r+0x90>
 8003820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003824:	1f0c      	subs	r4, r1, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfb8      	it	lt
 800382a:	18e4      	addlt	r4, r4, r3
 800382c:	f7ff fff1 	bl	8003812 <__malloc_lock>
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <_free_r+0x94>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	4610      	mov	r0, r2
 8003836:	b933      	cbnz	r3, 8003846 <_free_r+0x2e>
 8003838:	6063      	str	r3, [r4, #4]
 800383a:	6014      	str	r4, [r2, #0]
 800383c:	4628      	mov	r0, r5
 800383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003842:	f7ff bfe7 	b.w	8003814 <__malloc_unlock>
 8003846:	42a3      	cmp	r3, r4
 8003848:	d90b      	bls.n	8003862 <_free_r+0x4a>
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	1862      	adds	r2, r4, r1
 800384e:	4293      	cmp	r3, r2
 8003850:	bf01      	itttt	eq
 8003852:	681a      	ldreq	r2, [r3, #0]
 8003854:	685b      	ldreq	r3, [r3, #4]
 8003856:	1852      	addeq	r2, r2, r1
 8003858:	6022      	streq	r2, [r4, #0]
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6004      	str	r4, [r0, #0]
 800385e:	e7ed      	b.n	800383c <_free_r+0x24>
 8003860:	4613      	mov	r3, r2
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	b10a      	cbz	r2, 800386a <_free_r+0x52>
 8003866:	42a2      	cmp	r2, r4
 8003868:	d9fa      	bls.n	8003860 <_free_r+0x48>
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	1858      	adds	r0, r3, r1
 800386e:	42a0      	cmp	r0, r4
 8003870:	d10b      	bne.n	800388a <_free_r+0x72>
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	4401      	add	r1, r0
 8003876:	1858      	adds	r0, r3, r1
 8003878:	4282      	cmp	r2, r0
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	d1de      	bne.n	800383c <_free_r+0x24>
 800387e:	6810      	ldr	r0, [r2, #0]
 8003880:	6852      	ldr	r2, [r2, #4]
 8003882:	4401      	add	r1, r0
 8003884:	6019      	str	r1, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	e7d8      	b.n	800383c <_free_r+0x24>
 800388a:	d902      	bls.n	8003892 <_free_r+0x7a>
 800388c:	230c      	movs	r3, #12
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	e7d4      	b.n	800383c <_free_r+0x24>
 8003892:	6820      	ldr	r0, [r4, #0]
 8003894:	1821      	adds	r1, r4, r0
 8003896:	428a      	cmp	r2, r1
 8003898:	bf01      	itttt	eq
 800389a:	6811      	ldreq	r1, [r2, #0]
 800389c:	6852      	ldreq	r2, [r2, #4]
 800389e:	1809      	addeq	r1, r1, r0
 80038a0:	6021      	streq	r1, [r4, #0]
 80038a2:	6062      	str	r2, [r4, #4]
 80038a4:	605c      	str	r4, [r3, #4]
 80038a6:	e7c9      	b.n	800383c <_free_r+0x24>
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
 80038aa:	bf00      	nop
 80038ac:	200000b8 	.word	0x200000b8

080038b0 <_malloc_usable_size_r>:
 80038b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f1a0 0004 	sub.w	r0, r0, #4
 80038ba:	bfbc      	itt	lt
 80038bc:	580b      	ldrlt	r3, [r1, r0]
 80038be:	18c0      	addlt	r0, r0, r3
 80038c0:	4770      	bx	lr
	...

080038c4 <_sbrk>:
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <_sbrk+0x14>)
 80038c6:	4602      	mov	r2, r0
 80038c8:	6819      	ldr	r1, [r3, #0]
 80038ca:	b909      	cbnz	r1, 80038d0 <_sbrk+0xc>
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <_sbrk+0x18>)
 80038ce:	6019      	str	r1, [r3, #0]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	4402      	add	r2, r0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4770      	bx	lr
 80038d8:	200000c0 	.word	0x200000c0
 80038dc:	200001c8 	.word	0x200001c8

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
